
Lab_2_CPE316.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003758  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080038e0  080038e0  000048e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039bc  080039bc  0000509c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080039bc  080039bc  000049bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039c4  080039c4  0000509c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039c4  080039c4  000049c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080039c8  080039c8  000049c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  080039cc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000009c  08003a68  0000509c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08003a68  00005168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000509c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a2d1  00000000  00000000  000050cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001789  00000000  00000000  0000f39d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000910  00000000  00000000  00010b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006f1  00000000  00000000  00011438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024c53  00000000  00000000  00011b29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a693  00000000  00000000  0003677c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3d93  00000000  00000000  00040e0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00124ba2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000240c  00000000  00000000  00124be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00126ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000009c 	.word	0x2000009c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080038c8 	.word	0x080038c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a0 	.word	0x200000a0
 80001c4:	080038c8 	.word	0x080038c8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);

int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
    unsigned short sIndex;
    HAL_Init();
 80004fa:	f000 fdac 	bl	8001056 <HAL_Init>
    SystemClock_Config();
 80004fe:	f000 fbc3 	bl	8000c88 <SystemClock_Config>
    MX_GPIO_Init();
 8000502:	f000 fc43 	bl	8000d8c <MX_GPIO_Init>
    MX_USART2_UART_Init();
 8000506:	f000 fc11 	bl	8000d2c <MX_USART2_UART_Init>

    // Clear all debounced records, Previous, Low2High
    for (sIndex = 0; sIndex < Number_of_Cols; sIndex++)
 800050a:	2300      	movs	r3, #0
 800050c:	80fb      	strh	r3, [r7, #6]
 800050e:	e011      	b.n	8000534 <main+0x40>
    {
        sKeyDebouncedCol[sIndex] = 0x0000;
 8000510:	88fb      	ldrh	r3, [r7, #6]
 8000512:	4a70      	ldr	r2, [pc, #448]	@ (80006d4 <main+0x1e0>)
 8000514:	2100      	movs	r1, #0
 8000516:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        sKeyPreviousCol[sIndex] = 0x0000;
 800051a:	88fb      	ldrh	r3, [r7, #6]
 800051c:	4a6e      	ldr	r2, [pc, #440]	@ (80006d8 <main+0x1e4>)
 800051e:	2100      	movs	r1, #0
 8000520:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        sKeyLow2HighCol[sIndex] = 0x0000;
 8000524:	88fb      	ldrh	r3, [r7, #6]
 8000526:	4a6d      	ldr	r2, [pc, #436]	@ (80006dc <main+0x1e8>)
 8000528:	2100      	movs	r1, #0
 800052a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (sIndex = 0; sIndex < Number_of_Cols; sIndex++)
 800052e:	88fb      	ldrh	r3, [r7, #6]
 8000530:	3301      	adds	r3, #1
 8000532:	80fb      	strh	r3, [r7, #6]
 8000534:	88fb      	ldrh	r3, [r7, #6]
 8000536:	2b02      	cmp	r3, #2
 8000538:	d9ea      	bls.n	8000510 <main+0x1c>
    }

    while (1)
    {
        HAL_Delay(10);
 800053a:	200a      	movs	r0, #10
 800053c:	f000 fe00 	bl	8001140 <HAL_Delay>
        Keypadscan();
 8000540:	f000 f8d2 	bl	80006e8 <Keypadscan>
        if ((sKeyStatus & KeyDetect) && (sKeyIssued != 0xFFFF))
 8000544:	4b66      	ldr	r3, [pc, #408]	@ (80006e0 <main+0x1ec>)
 8000546:	881b      	ldrh	r3, [r3, #0]
 8000548:	f003 0301 	and.w	r3, r3, #1
 800054c:	2b00      	cmp	r3, #0
 800054e:	d0f4      	beq.n	800053a <main+0x46>
 8000550:	4b64      	ldr	r3, [pc, #400]	@ (80006e4 <main+0x1f0>)
 8000552:	881b      	ldrh	r3, [r3, #0]
 8000554:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000558:	4293      	cmp	r3, r2
 800055a:	d0ee      	beq.n	800053a <main+0x46>
        {
            switch (sKeyIssued)
 800055c:	4b61      	ldr	r3, [pc, #388]	@ (80006e4 <main+0x1f0>)
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	2b0b      	cmp	r3, #11
 8000562:	f200 8087 	bhi.w	8000674 <main+0x180>
 8000566:	a201      	add	r2, pc, #4	@ (adr r2, 800056c <main+0x78>)
 8000568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800056c:	0800059d 	.word	0x0800059d
 8000570:	080005af 	.word	0x080005af
 8000574:	080005c1 	.word	0x080005c1
 8000578:	080005d3 	.word	0x080005d3
 800057c:	080005e5 	.word	0x080005e5
 8000580:	080005f7 	.word	0x080005f7
 8000584:	08000609 	.word	0x08000609
 8000588:	0800061b 	.word	0x0800061b
 800058c:	0800062d 	.word	0x0800062d
 8000590:	0800063f 	.word	0x0800063f
 8000594:	08000651 	.word	0x08000651
 8000598:	08000663 	.word	0x08000663
            {
                case ONE_command:
                {
                    if (sKeyStatus & KeyLow2High)
 800059c:	4b50      	ldr	r3, [pc, #320]	@ (80006e0 <main+0x1ec>)
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	f003 0302 	and.w	r3, r3, #2
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d067      	beq.n	8000678 <main+0x184>
                        key1();
 80005a8:	f000 fa4e 	bl	8000a48 <key1>
                    break;
 80005ac:	e064      	b.n	8000678 <main+0x184>
                }
                case FOUR_command:
                {
                    if (sKeyStatus & KeyLow2High)
 80005ae:	4b4c      	ldr	r3, [pc, #304]	@ (80006e0 <main+0x1ec>)
 80005b0:	881b      	ldrh	r3, [r3, #0]
 80005b2:	f003 0302 	and.w	r3, r3, #2
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d060      	beq.n	800067c <main+0x188>
                        key4();
 80005ba:	f000 fa8d 	bl	8000ad8 <key4>
                    break;
 80005be:	e05d      	b.n	800067c <main+0x188>
                }
                case SEVEN_command:
                {
                    if (sKeyStatus & KeyLow2High)
 80005c0:	4b47      	ldr	r3, [pc, #284]	@ (80006e0 <main+0x1ec>)
 80005c2:	881b      	ldrh	r3, [r3, #0]
 80005c4:	f003 0302 	and.w	r3, r3, #2
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d059      	beq.n	8000680 <main+0x18c>
                        key7();
 80005cc:	f000 facc 	bl	8000b68 <key7>
                    break;
 80005d0:	e056      	b.n	8000680 <main+0x18c>
                }
                case STAR_command:
                {
                    if (sKeyStatus & KeyLow2High)
 80005d2:	4b43      	ldr	r3, [pc, #268]	@ (80006e0 <main+0x1ec>)
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	f003 0302 	and.w	r3, r3, #2
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d052      	beq.n	8000684 <main+0x190>
                        keyS();
 80005de:	f000 fb23 	bl	8000c28 <keyS>
                    break;
 80005e2:	e04f      	b.n	8000684 <main+0x190>
                }
                case TWO_command:
                {
                    if (sKeyStatus & KeyLow2High)
 80005e4:	4b3e      	ldr	r3, [pc, #248]	@ (80006e0 <main+0x1ec>)
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	f003 0302 	and.w	r3, r3, #2
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d04b      	beq.n	8000688 <main+0x194>
                        key2();
 80005f0:	f000 fa42 	bl	8000a78 <key2>
                    break;
 80005f4:	e048      	b.n	8000688 <main+0x194>
                }
                case FIVE_command:
                {
                    if (sKeyStatus & KeyLow2High)
 80005f6:	4b3a      	ldr	r3, [pc, #232]	@ (80006e0 <main+0x1ec>)
 80005f8:	881b      	ldrh	r3, [r3, #0]
 80005fa:	f003 0302 	and.w	r3, r3, #2
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d044      	beq.n	800068c <main+0x198>
                        key5();
 8000602:	f000 fa81 	bl	8000b08 <key5>
                    break;
 8000606:	e041      	b.n	800068c <main+0x198>
                }
                case EIGHT_command:
                {
                    if (sKeyStatus & KeyLow2High)
 8000608:	4b35      	ldr	r3, [pc, #212]	@ (80006e0 <main+0x1ec>)
 800060a:	881b      	ldrh	r3, [r3, #0]
 800060c:	f003 0302 	and.w	r3, r3, #2
 8000610:	2b00      	cmp	r3, #0
 8000612:	d03d      	beq.n	8000690 <main+0x19c>
                        key8();
 8000614:	f000 fac0 	bl	8000b98 <key8>
                    break;
 8000618:	e03a      	b.n	8000690 <main+0x19c>
                }
                case ZERO_command:
                {
                    if (sKeyStatus & KeyLow2High)
 800061a:	4b31      	ldr	r3, [pc, #196]	@ (80006e0 <main+0x1ec>)
 800061c:	881b      	ldrh	r3, [r3, #0]
 800061e:	f003 0302 	and.w	r3, r3, #2
 8000622:	2b00      	cmp	r3, #0
 8000624:	d036      	beq.n	8000694 <main+0x1a0>
                        key0();
 8000626:	f000 fae7 	bl	8000bf8 <key0>
                    break;
 800062a:	e033      	b.n	8000694 <main+0x1a0>
                }
                case THREE_command:
                {
                    if (sKeyStatus & KeyLow2High)
 800062c:	4b2c      	ldr	r3, [pc, #176]	@ (80006e0 <main+0x1ec>)
 800062e:	881b      	ldrh	r3, [r3, #0]
 8000630:	f003 0302 	and.w	r3, r3, #2
 8000634:	2b00      	cmp	r3, #0
 8000636:	d02f      	beq.n	8000698 <main+0x1a4>
                        key3();
 8000638:	f000 fa36 	bl	8000aa8 <key3>
                    break;
 800063c:	e02c      	b.n	8000698 <main+0x1a4>
                }
                case SIX_command:
                {
                    if (sKeyStatus & KeyLow2High)
 800063e:	4b28      	ldr	r3, [pc, #160]	@ (80006e0 <main+0x1ec>)
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	f003 0302 	and.w	r3, r3, #2
 8000646:	2b00      	cmp	r3, #0
 8000648:	d028      	beq.n	800069c <main+0x1a8>
                        key6();
 800064a:	f000 fa75 	bl	8000b38 <key6>
                    break;
 800064e:	e025      	b.n	800069c <main+0x1a8>
                }
                case NINE_command:
                {
                    if (sKeyStatus & KeyLow2High)
 8000650:	4b23      	ldr	r3, [pc, #140]	@ (80006e0 <main+0x1ec>)
 8000652:	881b      	ldrh	r3, [r3, #0]
 8000654:	f003 0302 	and.w	r3, r3, #2
 8000658:	2b00      	cmp	r3, #0
 800065a:	d021      	beq.n	80006a0 <main+0x1ac>
                        key9();
 800065c:	f000 fab4 	bl	8000bc8 <key9>
                    break;
 8000660:	e01e      	b.n	80006a0 <main+0x1ac>
                }
                case POUND_command:
                {
                    if (sKeyStatus & KeyLow2High)
 8000662:	4b1f      	ldr	r3, [pc, #124]	@ (80006e0 <main+0x1ec>)
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	f003 0302 	and.w	r3, r3, #2
 800066a:	2b00      	cmp	r3, #0
 800066c:	d01a      	beq.n	80006a4 <main+0x1b0>
                        keyP();
 800066e:	f000 faf3 	bl	8000c58 <keyP>
                    break;
 8000672:	e017      	b.n	80006a4 <main+0x1b0>
                }
                default:
                    break;
 8000674:	bf00      	nop
 8000676:	e016      	b.n	80006a6 <main+0x1b2>
                    break;
 8000678:	bf00      	nop
 800067a:	e014      	b.n	80006a6 <main+0x1b2>
                    break;
 800067c:	bf00      	nop
 800067e:	e012      	b.n	80006a6 <main+0x1b2>
                    break;
 8000680:	bf00      	nop
 8000682:	e010      	b.n	80006a6 <main+0x1b2>
                    break;
 8000684:	bf00      	nop
 8000686:	e00e      	b.n	80006a6 <main+0x1b2>
                    break;
 8000688:	bf00      	nop
 800068a:	e00c      	b.n	80006a6 <main+0x1b2>
                    break;
 800068c:	bf00      	nop
 800068e:	e00a      	b.n	80006a6 <main+0x1b2>
                    break;
 8000690:	bf00      	nop
 8000692:	e008      	b.n	80006a6 <main+0x1b2>
                    break;
 8000694:	bf00      	nop
 8000696:	e006      	b.n	80006a6 <main+0x1b2>
                    break;
 8000698:	bf00      	nop
 800069a:	e004      	b.n	80006a6 <main+0x1b2>
                    break;
 800069c:	bf00      	nop
 800069e:	e002      	b.n	80006a6 <main+0x1b2>
                    break;
 80006a0:	bf00      	nop
 80006a2:	e000      	b.n	80006a6 <main+0x1b2>
                    break;
 80006a4:	bf00      	nop
            }
            sKeyStatus &= ~(KeyDetect | KeyLow2High);
 80006a6:	4b0e      	ldr	r3, [pc, #56]	@ (80006e0 <main+0x1ec>)
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	f023 0303 	bic.w	r3, r3, #3
 80006ae:	b29a      	uxth	r2, r3
 80006b0:	4b0b      	ldr	r3, [pc, #44]	@ (80006e0 <main+0x1ec>)
 80006b2:	801a      	strh	r2, [r3, #0]
            // Clear all Low-2-High and High-2-Low records
            for (sIndex = 0; sIndex < Number_of_Cols; sIndex++)
 80006b4:	2300      	movs	r3, #0
 80006b6:	80fb      	strh	r3, [r7, #6]
 80006b8:	e007      	b.n	80006ca <main+0x1d6>
                sKeyLow2HighCol[sIndex] = 0x0000;
 80006ba:	88fb      	ldrh	r3, [r7, #6]
 80006bc:	4a07      	ldr	r2, [pc, #28]	@ (80006dc <main+0x1e8>)
 80006be:	2100      	movs	r1, #0
 80006c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (sIndex = 0; sIndex < Number_of_Cols; sIndex++)
 80006c4:	88fb      	ldrh	r3, [r7, #6]
 80006c6:	3301      	adds	r3, #1
 80006c8:	80fb      	strh	r3, [r7, #6]
 80006ca:	88fb      	ldrh	r3, [r7, #6]
 80006cc:	2b02      	cmp	r3, #2
 80006ce:	d9f4      	bls.n	80006ba <main+0x1c6>
        HAL_Delay(10);
 80006d0:	e733      	b.n	800053a <main+0x46>
 80006d2:	bf00      	nop
 80006d4:	200000c4 	.word	0x200000c4
 80006d8:	200000cc 	.word	0x200000cc
 80006dc:	200000d4 	.word	0x200000d4
 80006e0:	200000b8 	.word	0x200000b8
 80006e4:	200000ca 	.word	0x200000ca

080006e8 <Keypadscan>:
        }
    }
}

void Keypadscan()
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
    unsigned short sIndex;
    unsigned short Temp;

    // Clear all key records
    for (sIndex = 0; sIndex < Number_of_Cols; sIndex++)
 80006ee:	2300      	movs	r3, #0
 80006f0:	80fb      	strh	r3, [r7, #6]
 80006f2:	e007      	b.n	8000704 <Keypadscan+0x1c>
    {
        sKeyCurrentCol[sIndex] = 0x00;
 80006f4:	88fb      	ldrh	r3, [r7, #6]
 80006f6:	4aa7      	ldr	r2, [pc, #668]	@ (8000994 <Keypadscan+0x2ac>)
 80006f8:	2100      	movs	r1, #0
 80006fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (sIndex = 0; sIndex < Number_of_Cols; sIndex++)
 80006fe:	88fb      	ldrh	r3, [r7, #6]
 8000700:	3301      	adds	r3, #1
 8000702:	80fb      	strh	r3, [r7, #6]
 8000704:	88fb      	ldrh	r3, [r7, #6]
 8000706:	2b02      	cmp	r3, #2
 8000708:	d9f4      	bls.n	80006f4 <Keypadscan+0xc>
    }

    // Read all 3 column
    for (sIndex = 0; sIndex < Number_of_Keys; sIndex++)
 800070a:	2300      	movs	r3, #0
 800070c:	80fb      	strh	r3, [r7, #6]
 800070e:	e0bf      	b.n	8000890 <Keypadscan+0x1a8>
    {
        GPIOA->ODR &= ~(PA4 | PA1 | PA0);
 8000710:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800071a:	f023 0313 	bic.w	r3, r3, #19
 800071e:	6153      	str	r3, [r2, #20]
        GPIOA->ODR |= sKeyControl[sIndex].sKeySend;
 8000720:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000724:	6959      	ldr	r1, [r3, #20]
 8000726:	88fa      	ldrh	r2, [r7, #6]
 8000728:	489b      	ldr	r0, [pc, #620]	@ (8000998 <Keypadscan+0x2b0>)
 800072a:	4613      	mov	r3, r2
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	4413      	add	r3, r2
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	4403      	add	r3, r0
 8000734:	3304      	adds	r3, #4
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800073c:	430b      	orrs	r3, r1
 800073e:	6153      	str	r3, [r2, #20]
        HAL_Delay(0.5);
 8000740:	2000      	movs	r0, #0
 8000742:	f000 fcfd 	bl	8001140 <HAL_Delay>

        switch (sKeyControl[sIndex].sKeyCommand)
 8000746:	88fa      	ldrh	r2, [r7, #6]
 8000748:	4993      	ldr	r1, [pc, #588]	@ (8000998 <Keypadscan+0x2b0>)
 800074a:	4613      	mov	r3, r2
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	4413      	add	r3, r2
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	440b      	add	r3, r1
 8000754:	330a      	adds	r3, #10
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	2b0b      	cmp	r3, #11
 800075a:	bf8c      	ite	hi
 800075c:	2201      	movhi	r2, #1
 800075e:	2200      	movls	r2, #0
 8000760:	b2d2      	uxtb	r2, r2
 8000762:	2a00      	cmp	r2, #0
 8000764:	f040 8091 	bne.w	800088a <Keypadscan+0x1a2>
 8000768:	2201      	movs	r2, #1
 800076a:	fa02 f303 	lsl.w	r3, r2, r3
 800076e:	f240 6266 	movw	r2, #1638	@ 0x666
 8000772:	401a      	ands	r2, r3
 8000774:	2a00      	cmp	r2, #0
 8000776:	bf14      	ite	ne
 8000778:	2201      	movne	r2, #1
 800077a:	2200      	moveq	r2, #0
 800077c:	b2d2      	uxtb	r2, r2
 800077e:	2a00      	cmp	r2, #0
 8000780:	d138      	bne.n	80007f4 <Keypadscan+0x10c>
 8000782:	f640 0288 	movw	r2, #2184	@ 0x888
 8000786:	401a      	ands	r2, r3
 8000788:	2a00      	cmp	r2, #0
 800078a:	bf14      	ite	ne
 800078c:	2201      	movne	r2, #1
 800078e:	2200      	moveq	r2, #0
 8000790:	b2d2      	uxtb	r2, r2
 8000792:	2a00      	cmp	r2, #0
 8000794:	d152      	bne.n	800083c <Keypadscan+0x154>
 8000796:	f240 1211 	movw	r2, #273	@ 0x111
 800079a:	401a      	ands	r2, r3
 800079c:	2a00      	cmp	r2, #0
 800079e:	bf14      	ite	ne
 80007a0:	2301      	movne	r3, #1
 80007a2:	2300      	moveq	r3, #0
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d06f      	beq.n	800088a <Keypadscan+0x1a2>
        {
            case ONE_command:
            case TWO_command:
            case THREE_command:
                if (GPIOA->IDR & sKeyControl[sIndex].sKeyRead)
 80007aa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80007ae:	6919      	ldr	r1, [r3, #16]
 80007b0:	88fa      	ldrh	r2, [r7, #6]
 80007b2:	4879      	ldr	r0, [pc, #484]	@ (8000998 <Keypadscan+0x2b0>)
 80007b4:	4613      	mov	r3, r2
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	4413      	add	r3, r2
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	4403      	add	r3, r0
 80007be:	881b      	ldrh	r3, [r3, #0]
 80007c0:	400b      	ands	r3, r1
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d05e      	beq.n	8000884 <Keypadscan+0x19c>
                    sKeyCurrentCol[sKeyControl[sIndex].sKeyCol] = sKeyControl[sIndex].sKeyReadTempPos;
 80007c6:	88fa      	ldrh	r2, [r7, #6]
 80007c8:	88f9      	ldrh	r1, [r7, #6]
 80007ca:	4873      	ldr	r0, [pc, #460]	@ (8000998 <Keypadscan+0x2b0>)
 80007cc:	460b      	mov	r3, r1
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	440b      	add	r3, r1
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	4403      	add	r3, r0
 80007d6:	3306      	adds	r3, #6
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	4618      	mov	r0, r3
 80007dc:	496e      	ldr	r1, [pc, #440]	@ (8000998 <Keypadscan+0x2b0>)
 80007de:	4613      	mov	r3, r2
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	4413      	add	r3, r2
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	440b      	add	r3, r1
 80007e8:	3302      	adds	r3, #2
 80007ea:	881a      	ldrh	r2, [r3, #0]
 80007ec:	4b69      	ldr	r3, [pc, #420]	@ (8000994 <Keypadscan+0x2ac>)
 80007ee:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
                break;
 80007f2:	e047      	b.n	8000884 <Keypadscan+0x19c>
            case FIVE_command:
            case SIX_command:
            case SEVEN_command:
            case EIGHT_command:
            case NINE_command:
                if (GPIOC->IDR & sKeyControl[sIndex].sKeyRead)
 80007f4:	4b69      	ldr	r3, [pc, #420]	@ (800099c <Keypadscan+0x2b4>)
 80007f6:	6919      	ldr	r1, [r3, #16]
 80007f8:	88fa      	ldrh	r2, [r7, #6]
 80007fa:	4867      	ldr	r0, [pc, #412]	@ (8000998 <Keypadscan+0x2b0>)
 80007fc:	4613      	mov	r3, r2
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	4413      	add	r3, r2
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	4403      	add	r3, r0
 8000806:	881b      	ldrh	r3, [r3, #0]
 8000808:	400b      	ands	r3, r1
 800080a:	2b00      	cmp	r3, #0
 800080c:	d03c      	beq.n	8000888 <Keypadscan+0x1a0>
                    sKeyCurrentCol[sKeyControl[sIndex].sKeyCol] = sKeyControl[sIndex].sKeyReadTempPos;
 800080e:	88fa      	ldrh	r2, [r7, #6]
 8000810:	88f9      	ldrh	r1, [r7, #6]
 8000812:	4861      	ldr	r0, [pc, #388]	@ (8000998 <Keypadscan+0x2b0>)
 8000814:	460b      	mov	r3, r1
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	440b      	add	r3, r1
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	4403      	add	r3, r0
 800081e:	3306      	adds	r3, #6
 8000820:	881b      	ldrh	r3, [r3, #0]
 8000822:	4618      	mov	r0, r3
 8000824:	495c      	ldr	r1, [pc, #368]	@ (8000998 <Keypadscan+0x2b0>)
 8000826:	4613      	mov	r3, r2
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	4413      	add	r3, r2
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	440b      	add	r3, r1
 8000830:	3302      	adds	r3, #2
 8000832:	881a      	ldrh	r2, [r3, #0]
 8000834:	4b57      	ldr	r3, [pc, #348]	@ (8000994 <Keypadscan+0x2ac>)
 8000836:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
                break;
 800083a:	e025      	b.n	8000888 <Keypadscan+0x1a0>
            case STAR_command:
            case ZERO_command:
            case POUND_command:
                if (GPIOB->IDR & sKeyControl[sIndex].sKeyRead)
 800083c:	4b58      	ldr	r3, [pc, #352]	@ (80009a0 <Keypadscan+0x2b8>)
 800083e:	6919      	ldr	r1, [r3, #16]
 8000840:	88fa      	ldrh	r2, [r7, #6]
 8000842:	4855      	ldr	r0, [pc, #340]	@ (8000998 <Keypadscan+0x2b0>)
 8000844:	4613      	mov	r3, r2
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	4413      	add	r3, r2
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	4403      	add	r3, r0
 800084e:	881b      	ldrh	r3, [r3, #0]
 8000850:	400b      	ands	r3, r1
 8000852:	2b00      	cmp	r3, #0
 8000854:	d019      	beq.n	800088a <Keypadscan+0x1a2>
                    sKeyCurrentCol[sKeyControl[sIndex].sKeyCol] = sKeyControl[sIndex].sKeyReadTempPos;
 8000856:	88fa      	ldrh	r2, [r7, #6]
 8000858:	88f9      	ldrh	r1, [r7, #6]
 800085a:	484f      	ldr	r0, [pc, #316]	@ (8000998 <Keypadscan+0x2b0>)
 800085c:	460b      	mov	r3, r1
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	440b      	add	r3, r1
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	4403      	add	r3, r0
 8000866:	3306      	adds	r3, #6
 8000868:	881b      	ldrh	r3, [r3, #0]
 800086a:	4618      	mov	r0, r3
 800086c:	494a      	ldr	r1, [pc, #296]	@ (8000998 <Keypadscan+0x2b0>)
 800086e:	4613      	mov	r3, r2
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	4413      	add	r3, r2
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	440b      	add	r3, r1
 8000878:	3302      	adds	r3, #2
 800087a:	881a      	ldrh	r2, [r3, #0]
 800087c:	4b45      	ldr	r3, [pc, #276]	@ (8000994 <Keypadscan+0x2ac>)
 800087e:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
 8000882:	e002      	b.n	800088a <Keypadscan+0x1a2>
                break;
 8000884:	bf00      	nop
 8000886:	e000      	b.n	800088a <Keypadscan+0x1a2>
                break;
 8000888:	bf00      	nop
    for (sIndex = 0; sIndex < Number_of_Keys; sIndex++)
 800088a:	88fb      	ldrh	r3, [r7, #6]
 800088c:	3301      	adds	r3, #1
 800088e:	80fb      	strh	r3, [r7, #6]
 8000890:	88fb      	ldrh	r3, [r7, #6]
 8000892:	2b0b      	cmp	r3, #11
 8000894:	f67f af3c 	bls.w	8000710 <Keypadscan+0x28>
        }
    }

    // Check if a key is steadily read
    for (sIndex = 0; sIndex < Number_of_Cols; sIndex++)
 8000898:	2300      	movs	r3, #0
 800089a:	80fb      	strh	r3, [r7, #6]
 800089c:	e012      	b.n	80008c4 <Keypadscan+0x1dc>
    {
        if ((sKeyCurrentCol[sIndex] == sKeyDebouncedCol[sIndex]) && (sKeyCurrentCol[sIndex] != 0x0000))
 800089e:	88fb      	ldrh	r3, [r7, #6]
 80008a0:	4a3c      	ldr	r2, [pc, #240]	@ (8000994 <Keypadscan+0x2ac>)
 80008a2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	493e      	ldr	r1, [pc, #248]	@ (80009a4 <Keypadscan+0x2bc>)
 80008aa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d105      	bne.n	80008be <Keypadscan+0x1d6>
 80008b2:	88fb      	ldrh	r3, [r7, #6]
 80008b4:	4a37      	ldr	r2, [pc, #220]	@ (8000994 <Keypadscan+0x2ac>)
 80008b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d106      	bne.n	80008cc <Keypadscan+0x1e4>
    for (sIndex = 0; sIndex < Number_of_Cols; sIndex++)
 80008be:	88fb      	ldrh	r3, [r7, #6]
 80008c0:	3301      	adds	r3, #1
 80008c2:	80fb      	strh	r3, [r7, #6]
 80008c4:	88fb      	ldrh	r3, [r7, #6]
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	d9e9      	bls.n	800089e <Keypadscan+0x1b6>
 80008ca:	e000      	b.n	80008ce <Keypadscan+0x1e6>
            break;
 80008cc:	bf00      	nop
    }

    if (sIndex < Number_of_Cols)
 80008ce:	88fb      	ldrh	r3, [r7, #6]
 80008d0:	2b02      	cmp	r3, #2
 80008d2:	d87c      	bhi.n	80009ce <Keypadscan+0x2e6>
    {
        // Check for push on/ push off (Low To High)
        for (sIndex = 0; sIndex < Number_of_Cols; sIndex++)
 80008d4:	2300      	movs	r3, #0
 80008d6:	80fb      	strh	r3, [r7, #6]
 80008d8:	e017      	b.n	800090a <Keypadscan+0x222>
        {
            Temp = sKeyCurrentCol[sIndex] ^ sKeyPreviousCol[sIndex];
 80008da:	88fb      	ldrh	r3, [r7, #6]
 80008dc:	4a2d      	ldr	r2, [pc, #180]	@ (8000994 <Keypadscan+0x2ac>)
 80008de:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80008e2:	88fb      	ldrh	r3, [r7, #6]
 80008e4:	4930      	ldr	r1, [pc, #192]	@ (80009a8 <Keypadscan+0x2c0>)
 80008e6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80008ea:	4053      	eors	r3, r2
 80008ec:	80bb      	strh	r3, [r7, #4]
            sKeyLow2HighCol[sIndex] = (sKeyCurrentCol[sIndex] & Temp);
 80008ee:	88fb      	ldrh	r3, [r7, #6]
 80008f0:	4a28      	ldr	r2, [pc, #160]	@ (8000994 <Keypadscan+0x2ac>)
 80008f2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80008f6:	88fb      	ldrh	r3, [r7, #6]
 80008f8:	88ba      	ldrh	r2, [r7, #4]
 80008fa:	400a      	ands	r2, r1
 80008fc:	b291      	uxth	r1, r2
 80008fe:	4a2b      	ldr	r2, [pc, #172]	@ (80009ac <Keypadscan+0x2c4>)
 8000900:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (sIndex = 0; sIndex < Number_of_Cols; sIndex++)
 8000904:	88fb      	ldrh	r3, [r7, #6]
 8000906:	3301      	adds	r3, #1
 8000908:	80fb      	strh	r3, [r7, #6]
 800090a:	88fb      	ldrh	r3, [r7, #6]
 800090c:	2b02      	cmp	r3, #2
 800090e:	d9e4      	bls.n	80008da <Keypadscan+0x1f2>
        }

        // Update Previous records
        for (sIndex = 0; sIndex < Number_of_Cols; sIndex++)
 8000910:	2300      	movs	r3, #0
 8000912:	80fb      	strh	r3, [r7, #6]
 8000914:	e00a      	b.n	800092c <Keypadscan+0x244>
        {
            sKeyPreviousCol[sIndex] = sKeyCurrentCol[sIndex];
 8000916:	88fa      	ldrh	r2, [r7, #6]
 8000918:	88fb      	ldrh	r3, [r7, #6]
 800091a:	491e      	ldr	r1, [pc, #120]	@ (8000994 <Keypadscan+0x2ac>)
 800091c:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000920:	4a21      	ldr	r2, [pc, #132]	@ (80009a8 <Keypadscan+0x2c0>)
 8000922:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (sIndex = 0; sIndex < Number_of_Cols; sIndex++)
 8000926:	88fb      	ldrh	r3, [r7, #6]
 8000928:	3301      	adds	r3, #1
 800092a:	80fb      	strh	r3, [r7, #6]
 800092c:	88fb      	ldrh	r3, [r7, #6]
 800092e:	2b02      	cmp	r3, #2
 8000930:	d9f1      	bls.n	8000916 <Keypadscan+0x22e>
        }

        // Find which key is JUST depressed (Low To High)
        for (sIndex = 0; sIndex < Number_of_Keys; sIndex++)
 8000932:	2300      	movs	r3, #0
 8000934:	80fb      	strh	r3, [r7, #6]
 8000936:	e046      	b.n	80009c6 <Keypadscan+0x2de>
        {
            if (sKeyLow2HighCol[sKeyControl[sIndex].sKeyCol] & sKeyControl[sIndex].sKeyReadTempPos)
 8000938:	88fa      	ldrh	r2, [r7, #6]
 800093a:	4917      	ldr	r1, [pc, #92]	@ (8000998 <Keypadscan+0x2b0>)
 800093c:	4613      	mov	r3, r2
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	4413      	add	r3, r2
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	440b      	add	r3, r1
 8000946:	3306      	adds	r3, #6
 8000948:	881b      	ldrh	r3, [r3, #0]
 800094a:	461a      	mov	r2, r3
 800094c:	4b17      	ldr	r3, [pc, #92]	@ (80009ac <Keypadscan+0x2c4>)
 800094e:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8000952:	88fa      	ldrh	r2, [r7, #6]
 8000954:	4810      	ldr	r0, [pc, #64]	@ (8000998 <Keypadscan+0x2b0>)
 8000956:	4613      	mov	r3, r2
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	4413      	add	r3, r2
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	4403      	add	r3, r0
 8000960:	3302      	adds	r3, #2
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	400b      	ands	r3, r1
 8000966:	b29b      	uxth	r3, r3
 8000968:	2b00      	cmp	r3, #0
 800096a:	d025      	beq.n	80009b8 <Keypadscan+0x2d0>
            {
                sKeyIssued = sKeyControl[sIndex].sKeyCommand;
 800096c:	88fa      	ldrh	r2, [r7, #6]
 800096e:	490a      	ldr	r1, [pc, #40]	@ (8000998 <Keypadscan+0x2b0>)
 8000970:	4613      	mov	r3, r2
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	4413      	add	r3, r2
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	440b      	add	r3, r1
 800097a:	330a      	adds	r3, #10
 800097c:	881a      	ldrh	r2, [r3, #0]
 800097e:	4b0c      	ldr	r3, [pc, #48]	@ (80009b0 <Keypadscan+0x2c8>)
 8000980:	801a      	strh	r2, [r3, #0]
                {
                    sKeyStatus |= (KeyDetect | KeyLow2High);
 8000982:	4b0c      	ldr	r3, [pc, #48]	@ (80009b4 <Keypadscan+0x2cc>)
 8000984:	881b      	ldrh	r3, [r3, #0]
 8000986:	f043 0303 	orr.w	r3, r3, #3
 800098a:	b29a      	uxth	r2, r3
 800098c:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <Keypadscan+0x2cc>)
 800098e:	801a      	strh	r2, [r3, #0]
                    break;
 8000990:	e032      	b.n	80009f8 <Keypadscan+0x310>
 8000992:	bf00      	nop
 8000994:	200000bc 	.word	0x200000bc
 8000998:	20000000 	.word	0x20000000
 800099c:	48000800 	.word	0x48000800
 80009a0:	48000400 	.word	0x48000400
 80009a4:	200000c4 	.word	0x200000c4
 80009a8:	200000cc 	.word	0x200000cc
 80009ac:	200000d4 	.word	0x200000d4
 80009b0:	200000ca 	.word	0x200000ca
 80009b4:	200000b8 	.word	0x200000b8
                }
            }
            else
                sKeyIssued = 0xFFFF;
 80009b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a30 <Keypadscan+0x348>)
 80009ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009be:	801a      	strh	r2, [r3, #0]
        for (sIndex = 0; sIndex < Number_of_Keys; sIndex++)
 80009c0:	88fb      	ldrh	r3, [r7, #6]
 80009c2:	3301      	adds	r3, #1
 80009c4:	80fb      	strh	r3, [r7, #6]
 80009c6:	88fb      	ldrh	r3, [r7, #6]
 80009c8:	2b0b      	cmp	r3, #11
 80009ca:	d9b5      	bls.n	8000938 <Keypadscan+0x250>
 80009cc:	e014      	b.n	80009f8 <Keypadscan+0x310>
        }
    }
    else
    {
        sKeyStatus &= ~(KeyDetect | KeyLow2High);
 80009ce:	4b19      	ldr	r3, [pc, #100]	@ (8000a34 <Keypadscan+0x34c>)
 80009d0:	881b      	ldrh	r3, [r3, #0]
 80009d2:	f023 0303 	bic.w	r3, r3, #3
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	4b16      	ldr	r3, [pc, #88]	@ (8000a34 <Keypadscan+0x34c>)
 80009da:	801a      	strh	r2, [r3, #0]
        for (sIndex = 0; sIndex < Number_of_Cols; sIndex++)
 80009dc:	2300      	movs	r3, #0
 80009de:	80fb      	strh	r3, [r7, #6]
 80009e0:	e007      	b.n	80009f2 <Keypadscan+0x30a>
            sKeyPreviousCol[sIndex] = 0;
 80009e2:	88fb      	ldrh	r3, [r7, #6]
 80009e4:	4a14      	ldr	r2, [pc, #80]	@ (8000a38 <Keypadscan+0x350>)
 80009e6:	2100      	movs	r1, #0
 80009e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (sIndex = 0; sIndex < Number_of_Cols; sIndex++)
 80009ec:	88fb      	ldrh	r3, [r7, #6]
 80009ee:	3301      	adds	r3, #1
 80009f0:	80fb      	strh	r3, [r7, #6]
 80009f2:	88fb      	ldrh	r3, [r7, #6]
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d9f4      	bls.n	80009e2 <Keypadscan+0x2fa>
    }

    // Transfer Current reading to debounced reading
    for (sIndex = 0; sIndex < Number_of_Cols; sIndex++)
 80009f8:	2300      	movs	r3, #0
 80009fa:	80fb      	strh	r3, [r7, #6]
 80009fc:	e00f      	b.n	8000a1e <Keypadscan+0x336>
    {
        sKeyDebouncedCol[sIndex] = sKeyCurrentCol[sIndex];
 80009fe:	88fa      	ldrh	r2, [r7, #6]
 8000a00:	88fb      	ldrh	r3, [r7, #6]
 8000a02:	490e      	ldr	r1, [pc, #56]	@ (8000a3c <Keypadscan+0x354>)
 8000a04:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000a08:	4a0d      	ldr	r2, [pc, #52]	@ (8000a40 <Keypadscan+0x358>)
 8000a0a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        sKeyLow2HighCol[sIndex] = 0;
 8000a0e:	88fb      	ldrh	r3, [r7, #6]
 8000a10:	4a0c      	ldr	r2, [pc, #48]	@ (8000a44 <Keypadscan+0x35c>)
 8000a12:	2100      	movs	r1, #0
 8000a14:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (sIndex = 0; sIndex < Number_of_Cols; sIndex++)
 8000a18:	88fb      	ldrh	r3, [r7, #6]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	80fb      	strh	r3, [r7, #6]
 8000a1e:	88fb      	ldrh	r3, [r7, #6]
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d9ec      	bls.n	80009fe <Keypadscan+0x316>
    }
}
 8000a24:	bf00      	nop
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200000ca 	.word	0x200000ca
 8000a34:	200000b8 	.word	0x200000b8
 8000a38:	200000cc 	.word	0x200000cc
 8000a3c:	200000bc 	.word	0x200000bc
 8000a40:	200000c4 	.word	0x200000c4
 8000a44:	200000d4 	.word	0x200000d4

08000a48 <key1>:

void key1()
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart2, (uint8_t *)"Key_1_ON", 8, HAL_MAX_DELAY);
 8000a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a50:	2208      	movs	r2, #8
 8000a52:	4906      	ldr	r1, [pc, #24]	@ (8000a6c <key1+0x24>)
 8000a54:	4806      	ldr	r0, [pc, #24]	@ (8000a70 <key1+0x28>)
 8000a56:	f002 f9ad 	bl	8002db4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t *)"\n\r", 2, HAL_MAX_DELAY);
 8000a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5e:	2202      	movs	r2, #2
 8000a60:	4904      	ldr	r1, [pc, #16]	@ (8000a74 <key1+0x2c>)
 8000a62:	4803      	ldr	r0, [pc, #12]	@ (8000a70 <key1+0x28>)
 8000a64:	f002 f9a6 	bl	8002db4 <HAL_UART_Transmit>
}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	080038e0 	.word	0x080038e0
 8000a70:	200000dc 	.word	0x200000dc
 8000a74:	080038ec 	.word	0x080038ec

08000a78 <key2>:

void key2()
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart2, (uint8_t *)"Key_2_ON", 8, HAL_MAX_DELAY);
 8000a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a80:	2208      	movs	r2, #8
 8000a82:	4906      	ldr	r1, [pc, #24]	@ (8000a9c <key2+0x24>)
 8000a84:	4806      	ldr	r0, [pc, #24]	@ (8000aa0 <key2+0x28>)
 8000a86:	f002 f995 	bl	8002db4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t *)"\n\r", 2, HAL_MAX_DELAY);
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8e:	2202      	movs	r2, #2
 8000a90:	4904      	ldr	r1, [pc, #16]	@ (8000aa4 <key2+0x2c>)
 8000a92:	4803      	ldr	r0, [pc, #12]	@ (8000aa0 <key2+0x28>)
 8000a94:	f002 f98e 	bl	8002db4 <HAL_UART_Transmit>
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	080038f0 	.word	0x080038f0
 8000aa0:	200000dc 	.word	0x200000dc
 8000aa4:	080038ec 	.word	0x080038ec

08000aa8 <key3>:

void key3()
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart2, (uint8_t *)"Key_3_ON", 8, HAL_MAX_DELAY);
 8000aac:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab0:	2208      	movs	r2, #8
 8000ab2:	4906      	ldr	r1, [pc, #24]	@ (8000acc <key3+0x24>)
 8000ab4:	4806      	ldr	r0, [pc, #24]	@ (8000ad0 <key3+0x28>)
 8000ab6:	f002 f97d 	bl	8002db4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t *)"\n\r", 2, HAL_MAX_DELAY);
 8000aba:	f04f 33ff 	mov.w	r3, #4294967295
 8000abe:	2202      	movs	r2, #2
 8000ac0:	4904      	ldr	r1, [pc, #16]	@ (8000ad4 <key3+0x2c>)
 8000ac2:	4803      	ldr	r0, [pc, #12]	@ (8000ad0 <key3+0x28>)
 8000ac4:	f002 f976 	bl	8002db4 <HAL_UART_Transmit>
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	080038fc 	.word	0x080038fc
 8000ad0:	200000dc 	.word	0x200000dc
 8000ad4:	080038ec 	.word	0x080038ec

08000ad8 <key4>:

void key4()
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart2, (uint8_t *)"Key_4_ON", 8, HAL_MAX_DELAY);
 8000adc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae0:	2208      	movs	r2, #8
 8000ae2:	4906      	ldr	r1, [pc, #24]	@ (8000afc <key4+0x24>)
 8000ae4:	4806      	ldr	r0, [pc, #24]	@ (8000b00 <key4+0x28>)
 8000ae6:	f002 f965 	bl	8002db4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t *)"\n\r", 2, HAL_MAX_DELAY);
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295
 8000aee:	2202      	movs	r2, #2
 8000af0:	4904      	ldr	r1, [pc, #16]	@ (8000b04 <key4+0x2c>)
 8000af2:	4803      	ldr	r0, [pc, #12]	@ (8000b00 <key4+0x28>)
 8000af4:	f002 f95e 	bl	8002db4 <HAL_UART_Transmit>
}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	08003908 	.word	0x08003908
 8000b00:	200000dc 	.word	0x200000dc
 8000b04:	080038ec 	.word	0x080038ec

08000b08 <key5>:

void key5()
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart2, (uint8_t *)"Key_5_ON", 8, HAL_MAX_DELAY);
 8000b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b10:	2208      	movs	r2, #8
 8000b12:	4906      	ldr	r1, [pc, #24]	@ (8000b2c <key5+0x24>)
 8000b14:	4806      	ldr	r0, [pc, #24]	@ (8000b30 <key5+0x28>)
 8000b16:	f002 f94d 	bl	8002db4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t *)"\n\r", 2, HAL_MAX_DELAY);
 8000b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1e:	2202      	movs	r2, #2
 8000b20:	4904      	ldr	r1, [pc, #16]	@ (8000b34 <key5+0x2c>)
 8000b22:	4803      	ldr	r0, [pc, #12]	@ (8000b30 <key5+0x28>)
 8000b24:	f002 f946 	bl	8002db4 <HAL_UART_Transmit>
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	08003914 	.word	0x08003914
 8000b30:	200000dc 	.word	0x200000dc
 8000b34:	080038ec 	.word	0x080038ec

08000b38 <key6>:

void key6()
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart2, (uint8_t *)"Key_6_ON", 8, HAL_MAX_DELAY);
 8000b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b40:	2208      	movs	r2, #8
 8000b42:	4906      	ldr	r1, [pc, #24]	@ (8000b5c <key6+0x24>)
 8000b44:	4806      	ldr	r0, [pc, #24]	@ (8000b60 <key6+0x28>)
 8000b46:	f002 f935 	bl	8002db4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t *)"\n\r", 2, HAL_MAX_DELAY);
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4e:	2202      	movs	r2, #2
 8000b50:	4904      	ldr	r1, [pc, #16]	@ (8000b64 <key6+0x2c>)
 8000b52:	4803      	ldr	r0, [pc, #12]	@ (8000b60 <key6+0x28>)
 8000b54:	f002 f92e 	bl	8002db4 <HAL_UART_Transmit>
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	08003920 	.word	0x08003920
 8000b60:	200000dc 	.word	0x200000dc
 8000b64:	080038ec 	.word	0x080038ec

08000b68 <key7>:

void key7()
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart2, (uint8_t *)"Key_7_ON", 8, HAL_MAX_DELAY);
 8000b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b70:	2208      	movs	r2, #8
 8000b72:	4906      	ldr	r1, [pc, #24]	@ (8000b8c <key7+0x24>)
 8000b74:	4806      	ldr	r0, [pc, #24]	@ (8000b90 <key7+0x28>)
 8000b76:	f002 f91d 	bl	8002db4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t *)"\n\r", 2, HAL_MAX_DELAY);
 8000b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7e:	2202      	movs	r2, #2
 8000b80:	4904      	ldr	r1, [pc, #16]	@ (8000b94 <key7+0x2c>)
 8000b82:	4803      	ldr	r0, [pc, #12]	@ (8000b90 <key7+0x28>)
 8000b84:	f002 f916 	bl	8002db4 <HAL_UART_Transmit>
}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	0800392c 	.word	0x0800392c
 8000b90:	200000dc 	.word	0x200000dc
 8000b94:	080038ec 	.word	0x080038ec

08000b98 <key8>:

void key8()
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart2, (uint8_t *)"Key_8_ON", 8, HAL_MAX_DELAY);
 8000b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba0:	2208      	movs	r2, #8
 8000ba2:	4906      	ldr	r1, [pc, #24]	@ (8000bbc <key8+0x24>)
 8000ba4:	4806      	ldr	r0, [pc, #24]	@ (8000bc0 <key8+0x28>)
 8000ba6:	f002 f905 	bl	8002db4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t *)"\n\r", 2, HAL_MAX_DELAY);
 8000baa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bae:	2202      	movs	r2, #2
 8000bb0:	4904      	ldr	r1, [pc, #16]	@ (8000bc4 <key8+0x2c>)
 8000bb2:	4803      	ldr	r0, [pc, #12]	@ (8000bc0 <key8+0x28>)
 8000bb4:	f002 f8fe 	bl	8002db4 <HAL_UART_Transmit>
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	08003938 	.word	0x08003938
 8000bc0:	200000dc 	.word	0x200000dc
 8000bc4:	080038ec 	.word	0x080038ec

08000bc8 <key9>:

void key9()
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart2, (uint8_t *)"Key_9_ON", 8, HAL_MAX_DELAY);
 8000bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd0:	2208      	movs	r2, #8
 8000bd2:	4906      	ldr	r1, [pc, #24]	@ (8000bec <key9+0x24>)
 8000bd4:	4806      	ldr	r0, [pc, #24]	@ (8000bf0 <key9+0x28>)
 8000bd6:	f002 f8ed 	bl	8002db4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t *)"\n\r", 2, HAL_MAX_DELAY);
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295
 8000bde:	2202      	movs	r2, #2
 8000be0:	4904      	ldr	r1, [pc, #16]	@ (8000bf4 <key9+0x2c>)
 8000be2:	4803      	ldr	r0, [pc, #12]	@ (8000bf0 <key9+0x28>)
 8000be4:	f002 f8e6 	bl	8002db4 <HAL_UART_Transmit>
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	08003944 	.word	0x08003944
 8000bf0:	200000dc 	.word	0x200000dc
 8000bf4:	080038ec 	.word	0x080038ec

08000bf8 <key0>:

void key0()
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart2, (uint8_t *)"Key_0_ON", 8, HAL_MAX_DELAY);
 8000bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000c00:	2208      	movs	r2, #8
 8000c02:	4906      	ldr	r1, [pc, #24]	@ (8000c1c <key0+0x24>)
 8000c04:	4806      	ldr	r0, [pc, #24]	@ (8000c20 <key0+0x28>)
 8000c06:	f002 f8d5 	bl	8002db4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t *)"\n\r", 2, HAL_MAX_DELAY);
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0e:	2202      	movs	r2, #2
 8000c10:	4904      	ldr	r1, [pc, #16]	@ (8000c24 <key0+0x2c>)
 8000c12:	4803      	ldr	r0, [pc, #12]	@ (8000c20 <key0+0x28>)
 8000c14:	f002 f8ce 	bl	8002db4 <HAL_UART_Transmit>
}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	08003950 	.word	0x08003950
 8000c20:	200000dc 	.word	0x200000dc
 8000c24:	080038ec 	.word	0x080038ec

08000c28 <keyS>:

void keyS()
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart2, (uint8_t *)"Key_S_ON", 8, HAL_MAX_DELAY);
 8000c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c30:	2208      	movs	r2, #8
 8000c32:	4906      	ldr	r1, [pc, #24]	@ (8000c4c <keyS+0x24>)
 8000c34:	4806      	ldr	r0, [pc, #24]	@ (8000c50 <keyS+0x28>)
 8000c36:	f002 f8bd 	bl	8002db4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t *)"\n\r", 2, HAL_MAX_DELAY);
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3e:	2202      	movs	r2, #2
 8000c40:	4904      	ldr	r1, [pc, #16]	@ (8000c54 <keyS+0x2c>)
 8000c42:	4803      	ldr	r0, [pc, #12]	@ (8000c50 <keyS+0x28>)
 8000c44:	f002 f8b6 	bl	8002db4 <HAL_UART_Transmit>
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	0800395c 	.word	0x0800395c
 8000c50:	200000dc 	.word	0x200000dc
 8000c54:	080038ec 	.word	0x080038ec

08000c58 <keyP>:

void keyP()
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart2, (uint8_t *)"Key_P_ON", 8, HAL_MAX_DELAY);
 8000c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c60:	2208      	movs	r2, #8
 8000c62:	4906      	ldr	r1, [pc, #24]	@ (8000c7c <keyP+0x24>)
 8000c64:	4806      	ldr	r0, [pc, #24]	@ (8000c80 <keyP+0x28>)
 8000c66:	f002 f8a5 	bl	8002db4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t *)"\n\r", 2, HAL_MAX_DELAY);
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	2202      	movs	r2, #2
 8000c70:	4904      	ldr	r1, [pc, #16]	@ (8000c84 <keyP+0x2c>)
 8000c72:	4803      	ldr	r0, [pc, #12]	@ (8000c80 <keyP+0x28>)
 8000c74:	f002 f89e 	bl	8002db4 <HAL_UART_Transmit>
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	08003968 	.word	0x08003968
 8000c80:	200000dc 	.word	0x200000dc
 8000c84:	080038ec 	.word	0x080038ec

08000c88 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b096      	sub	sp, #88	@ 0x58
 8000c8c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	2244      	movs	r2, #68	@ 0x44
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f002 fde9 	bl	800386e <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c9c:	463b      	mov	r3, r7
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage */
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000caa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000cae:	f000 fd21 	bl	80016f4 <HAL_PWREx_ControlVoltageScaling>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <SystemClock_Config+0x34>
    {
        Error_Handler();
 8000cb8:	f000 f8dc 	bl	8000e74 <Error_Handler>
    }

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cc4:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc6:	2310      	movs	r3, #16
 8000cc8:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLM = 1;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLN = 10;
 8000cd6:	230a      	movs	r3, #10
 8000cd8:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000cda:	2307      	movs	r3, #7
 8000cdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	653b      	str	r3, [r7, #80]	@ 0x50
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	657b      	str	r3, [r7, #84]	@ 0x54

    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 fd58 	bl	80017a0 <HAL_RCC_OscConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <SystemClock_Config+0x72>
    {
        Error_Handler();
 8000cf6:	f000 f8bd 	bl	8000e74 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cfa:	230f      	movs	r3, #15
 8000cfc:	603b      	str	r3, [r7, #0]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d02:	2300      	movs	r3, #0
 8000d04:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d0e:	463b      	mov	r3, r7
 8000d10:	2104      	movs	r1, #4
 8000d12:	4618      	mov	r0, r3
 8000d14:	f001 f920 	bl	8001f58 <HAL_RCC_ClockConfig>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <SystemClock_Config+0x9a>
    {
        Error_Handler();
 8000d1e:	f000 f8a9 	bl	8000e74 <Error_Handler>
    }
}
 8000d22:	bf00      	nop
 8000d24:	3758      	adds	r7, #88	@ 0x58
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART2_Init 0 */
    /* USER CODE END USART2_Init 0 */
    /* USER CODE BEGIN USART2_Init 1 */
    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8000d30:	4b14      	ldr	r3, [pc, #80]	@ (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d32:	4a15      	ldr	r2, [pc, #84]	@ (8000d88 <MX_USART2_UART_Init+0x5c>)
 8000d34:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8000d36:	4b13      	ldr	r3, [pc, #76]	@ (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d3c:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	@ (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	@ (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d52:	220c      	movs	r2, #12
 8000d54:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	@ (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	@ (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d62:	4b08      	ldr	r3, [pc, #32]	@ (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	621a      	str	r2, [r3, #32]
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d68:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d6e:	4805      	ldr	r0, [pc, #20]	@ (8000d84 <MX_USART2_UART_Init+0x58>)
 8000d70:	f001 ffd2 	bl	8002d18 <HAL_UART_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_USART2_UART_Init+0x52>
    {
        Error_Handler();
 8000d7a:	f000 f87b 	bl	8000e74 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */
    /* USER CODE END USART2_Init 2 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200000dc 	.word	0x200000dc
 8000d88:	40004400 	.word	0x40004400

08000d8c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d92:	f107 030c 	add.w	r3, r7, #12
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
 8000da0:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da2:	4b31      	ldr	r3, [pc, #196]	@ (8000e68 <MX_GPIO_Init+0xdc>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da6:	4a30      	ldr	r2, [pc, #192]	@ (8000e68 <MX_GPIO_Init+0xdc>)
 8000da8:	f043 0304 	orr.w	r3, r3, #4
 8000dac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dae:	4b2e      	ldr	r3, [pc, #184]	@ (8000e68 <MX_GPIO_Init+0xdc>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db2:	f003 0304 	and.w	r3, r3, #4
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	4b2b      	ldr	r3, [pc, #172]	@ (8000e68 <MX_GPIO_Init+0xdc>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dbe:	4a2a      	ldr	r2, [pc, #168]	@ (8000e68 <MX_GPIO_Init+0xdc>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dc6:	4b28      	ldr	r3, [pc, #160]	@ (8000e68 <MX_GPIO_Init+0xdc>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd2:	4b25      	ldr	r3, [pc, #148]	@ (8000e68 <MX_GPIO_Init+0xdc>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd6:	4a24      	ldr	r2, [pc, #144]	@ (8000e68 <MX_GPIO_Init+0xdc>)
 8000dd8:	f043 0302 	orr.w	r3, r3, #2
 8000ddc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dde:	4b22      	ldr	r3, [pc, #136]	@ (8000e68 <MX_GPIO_Init+0xdc>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	603b      	str	r3, [r7, #0]
 8000de8:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2113      	movs	r1, #19
 8000dee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000df2:	f000 fc59 	bl	80016a8 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : PC0 PC1 */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000df6:	2303      	movs	r3, #3
 8000df8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e02:	f107 030c 	add.w	r3, r7, #12
 8000e06:	4619      	mov	r1, r3
 8000e08:	4818      	ldr	r0, [pc, #96]	@ (8000e6c <MX_GPIO_Init+0xe0>)
 8000e0a:	f000 faa3 	bl	8001354 <HAL_GPIO_Init>

    /*Configure GPIO pins : PA0 PA1 PA4 */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8000e0e:	2313      	movs	r3, #19
 8000e10:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 030c 	add.w	r3, r7, #12
 8000e22:	4619      	mov	r1, r3
 8000e24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e28:	f000 fa94 	bl	8001354 <HAL_GPIO_Init>

    /*Configure GPIO pin : PB0 */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e34:	2302      	movs	r3, #2
 8000e36:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	480c      	ldr	r0, [pc, #48]	@ (8000e70 <MX_GPIO_Init+0xe4>)
 8000e40:	f000 fa88 	bl	8001354 <HAL_GPIO_Init>

    /*Configure GPIO pin : PA10 */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e48:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e52:	f107 030c 	add.w	r3, r7, #12
 8000e56:	4619      	mov	r1, r3
 8000e58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e5c:	f000 fa7a 	bl	8001354 <HAL_GPIO_Init>
    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8000e60:	bf00      	nop
 8000e62:	3720      	adds	r7, #32
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	48000800 	.word	0x48000800
 8000e70:	48000400 	.word	0x48000400

08000e74 <Error_Handler>:
/**
 * @brief This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e78:	b672      	cpsid	i
}
 8000e7a:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <Error_Handler+0x8>

08000e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e86:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec4 <HAL_MspInit+0x44>)
 8000e88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e8a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ec4 <HAL_MspInit+0x44>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e92:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec4 <HAL_MspInit+0x44>)
 8000e94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ec4 <HAL_MspInit+0x44>)
 8000ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ea2:	4a08      	ldr	r2, [pc, #32]	@ (8000ec4 <HAL_MspInit+0x44>)
 8000ea4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ea8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <HAL_MspInit+0x44>)
 8000eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eb2:	603b      	str	r3, [r7, #0]
 8000eb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40021000 	.word	0x40021000

08000ec8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b0ac      	sub	sp, #176	@ 0xb0
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	2288      	movs	r2, #136	@ 0x88
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f002 fcc0 	bl	800386e <memset>
  if(huart->Instance==USART2)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a21      	ldr	r2, [pc, #132]	@ (8000f78 <HAL_UART_MspInit+0xb0>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d13b      	bne.n	8000f70 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000efc:	2300      	movs	r3, #0
 8000efe:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4618      	mov	r0, r3
 8000f06:	f001 fa4b 	bl	80023a0 <HAL_RCCEx_PeriphCLKConfig>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f10:	f7ff ffb0 	bl	8000e74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f14:	4b19      	ldr	r3, [pc, #100]	@ (8000f7c <HAL_UART_MspInit+0xb4>)
 8000f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f18:	4a18      	ldr	r2, [pc, #96]	@ (8000f7c <HAL_UART_MspInit+0xb4>)
 8000f1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f20:	4b16      	ldr	r3, [pc, #88]	@ (8000f7c <HAL_UART_MspInit+0xb4>)
 8000f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2c:	4b13      	ldr	r3, [pc, #76]	@ (8000f7c <HAL_UART_MspInit+0xb4>)
 8000f2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f30:	4a12      	ldr	r2, [pc, #72]	@ (8000f7c <HAL_UART_MspInit+0xb4>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f38:	4b10      	ldr	r3, [pc, #64]	@ (8000f7c <HAL_UART_MspInit+0xb4>)
 8000f3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f44:	230c      	movs	r3, #12
 8000f46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f56:	2303      	movs	r3, #3
 8000f58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f5c:	2307      	movs	r3, #7
 8000f5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f62:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f66:	4619      	mov	r1, r3
 8000f68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f6c:	f000 f9f2 	bl	8001354 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f70:	bf00      	nop
 8000f72:	37b0      	adds	r7, #176	@ 0xb0
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40004400 	.word	0x40004400
 8000f7c:	40021000 	.word	0x40021000

08000f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f84:	bf00      	nop
 8000f86:	e7fd      	b.n	8000f84 <NMI_Handler+0x4>

08000f88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8c:	bf00      	nop
 8000f8e:	e7fd      	b.n	8000f8c <HardFault_Handler+0x4>

08000f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f94:	bf00      	nop
 8000f96:	e7fd      	b.n	8000f94 <MemManage_Handler+0x4>

08000f98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9c:	bf00      	nop
 8000f9e:	e7fd      	b.n	8000f9c <BusFault_Handler+0x4>

08000fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa4:	bf00      	nop
 8000fa6:	e7fd      	b.n	8000fa4 <UsageFault_Handler+0x4>

08000fa8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd6:	f000 f893 	bl	8001100 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fe4:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <SystemInit+0x20>)
 8000fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fea:	4a05      	ldr	r2, [pc, #20]	@ (8001000 <SystemInit+0x20>)
 8000fec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ff0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001004:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800103c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001008:	f7ff ffea 	bl	8000fe0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800100c:	480c      	ldr	r0, [pc, #48]	@ (8001040 <LoopForever+0x6>)
  ldr r1, =_edata
 800100e:	490d      	ldr	r1, [pc, #52]	@ (8001044 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001010:	4a0d      	ldr	r2, [pc, #52]	@ (8001048 <LoopForever+0xe>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001014:	e002      	b.n	800101c <LoopCopyDataInit>

08001016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101a:	3304      	adds	r3, #4

0800101c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800101c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001020:	d3f9      	bcc.n	8001016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001022:	4a0a      	ldr	r2, [pc, #40]	@ (800104c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001024:	4c0a      	ldr	r4, [pc, #40]	@ (8001050 <LoopForever+0x16>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001028:	e001      	b.n	800102e <LoopFillZerobss>

0800102a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800102c:	3204      	adds	r2, #4

0800102e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001030:	d3fb      	bcc.n	800102a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001032:	f002 fc25 	bl	8003880 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001036:	f7ff fa5d 	bl	80004f4 <main>

0800103a <LoopForever>:

LoopForever:
    b LoopForever
 800103a:	e7fe      	b.n	800103a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800103c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001040:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001044:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001048:	080039cc 	.word	0x080039cc
  ldr r2, =_sbss
 800104c:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001050:	20000168 	.word	0x20000168

08001054 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001054:	e7fe      	b.n	8001054 <ADC1_2_IRQHandler>

08001056 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800105c:	2300      	movs	r3, #0
 800105e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001060:	2003      	movs	r0, #3
 8001062:	f000 f943 	bl	80012ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001066:	200f      	movs	r0, #15
 8001068:	f000 f80e 	bl	8001088 <HAL_InitTick>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d002      	beq.n	8001078 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	71fb      	strb	r3, [r7, #7]
 8001076:	e001      	b.n	800107c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001078:	f7ff ff02 	bl	8000e80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800107c:	79fb      	ldrb	r3, [r7, #7]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001090:	2300      	movs	r3, #0
 8001092:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001094:	4b17      	ldr	r3, [pc, #92]	@ (80010f4 <HAL_InitTick+0x6c>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d023      	beq.n	80010e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800109c:	4b16      	ldr	r3, [pc, #88]	@ (80010f8 <HAL_InitTick+0x70>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b14      	ldr	r3, [pc, #80]	@ (80010f4 <HAL_InitTick+0x6c>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4619      	mov	r1, r3
 80010a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 f941 	bl	800133a <HAL_SYSTICK_Config>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d10f      	bne.n	80010de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2b0f      	cmp	r3, #15
 80010c2:	d809      	bhi.n	80010d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c4:	2200      	movs	r2, #0
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	f04f 30ff 	mov.w	r0, #4294967295
 80010cc:	f000 f919 	bl	8001302 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010d0:	4a0a      	ldr	r2, [pc, #40]	@ (80010fc <HAL_InitTick+0x74>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6013      	str	r3, [r2, #0]
 80010d6:	e007      	b.n	80010e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	73fb      	strb	r3, [r7, #15]
 80010dc:	e004      	b.n	80010e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	73fb      	strb	r3, [r7, #15]
 80010e2:	e001      	b.n	80010e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000098 	.word	0x20000098
 80010f8:	20000090 	.word	0x20000090
 80010fc:	20000094 	.word	0x20000094

08001100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001104:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <HAL_IncTick+0x20>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <HAL_IncTick+0x24>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4413      	add	r3, r2
 8001110:	4a04      	ldr	r2, [pc, #16]	@ (8001124 <HAL_IncTick+0x24>)
 8001112:	6013      	str	r3, [r2, #0]
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20000098 	.word	0x20000098
 8001124:	20000164 	.word	0x20000164

08001128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return uwTick;
 800112c:	4b03      	ldr	r3, [pc, #12]	@ (800113c <HAL_GetTick+0x14>)
 800112e:	681b      	ldr	r3, [r3, #0]
}
 8001130:	4618      	mov	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20000164 	.word	0x20000164

08001140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001148:	f7ff ffee 	bl	8001128 <HAL_GetTick>
 800114c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001158:	d005      	beq.n	8001166 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800115a:	4b0a      	ldr	r3, [pc, #40]	@ (8001184 <HAL_Delay+0x44>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	461a      	mov	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4413      	add	r3, r2
 8001164:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001166:	bf00      	nop
 8001168:	f7ff ffde 	bl	8001128 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	429a      	cmp	r2, r3
 8001176:	d8f7      	bhi.n	8001168 <HAL_Delay+0x28>
  {
  }
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000098 	.word	0x20000098

08001188 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001198:	4b0c      	ldr	r3, [pc, #48]	@ (80011cc <__NVIC_SetPriorityGrouping+0x44>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011a4:	4013      	ands	r3, r2
 80011a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ba:	4a04      	ldr	r2, [pc, #16]	@ (80011cc <__NVIC_SetPriorityGrouping+0x44>)
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	60d3      	str	r3, [r2, #12]
}
 80011c0:	bf00      	nop
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d4:	4b04      	ldr	r3, [pc, #16]	@ (80011e8 <__NVIC_GetPriorityGrouping+0x18>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	0a1b      	lsrs	r3, r3, #8
 80011da:	f003 0307 	and.w	r3, r3, #7
}
 80011de:	4618      	mov	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	db0a      	blt.n	8001216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	b2da      	uxtb	r2, r3
 8001204:	490c      	ldr	r1, [pc, #48]	@ (8001238 <__NVIC_SetPriority+0x4c>)
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	0112      	lsls	r2, r2, #4
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	440b      	add	r3, r1
 8001210:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001214:	e00a      	b.n	800122c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4908      	ldr	r1, [pc, #32]	@ (800123c <__NVIC_SetPriority+0x50>)
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	3b04      	subs	r3, #4
 8001224:	0112      	lsls	r2, r2, #4
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	440b      	add	r3, r1
 800122a:	761a      	strb	r2, [r3, #24]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000e100 	.word	0xe000e100
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	@ 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f1c3 0307 	rsb	r3, r3, #7
 800125a:	2b04      	cmp	r3, #4
 800125c:	bf28      	it	cs
 800125e:	2304      	movcs	r3, #4
 8001260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3304      	adds	r3, #4
 8001266:	2b06      	cmp	r3, #6
 8001268:	d902      	bls.n	8001270 <NVIC_EncodePriority+0x30>
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3b03      	subs	r3, #3
 800126e:	e000      	b.n	8001272 <NVIC_EncodePriority+0x32>
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	f04f 32ff 	mov.w	r2, #4294967295
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43da      	mvns	r2, r3
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	401a      	ands	r2, r3
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001288:	f04f 31ff 	mov.w	r1, #4294967295
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	43d9      	mvns	r1, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	4313      	orrs	r3, r2
         );
}
 800129a:	4618      	mov	r0, r3
 800129c:	3724      	adds	r7, #36	@ 0x24
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012b8:	d301      	bcc.n	80012be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ba:	2301      	movs	r3, #1
 80012bc:	e00f      	b.n	80012de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012be:	4a0a      	ldr	r2, [pc, #40]	@ (80012e8 <SysTick_Config+0x40>)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c6:	210f      	movs	r1, #15
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295
 80012cc:	f7ff ff8e 	bl	80011ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d0:	4b05      	ldr	r3, [pc, #20]	@ (80012e8 <SysTick_Config+0x40>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d6:	4b04      	ldr	r3, [pc, #16]	@ (80012e8 <SysTick_Config+0x40>)
 80012d8:	2207      	movs	r2, #7
 80012da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	e000e010 	.word	0xe000e010

080012ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff ff47 	bl	8001188 <__NVIC_SetPriorityGrouping>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b086      	sub	sp, #24
 8001306:	af00      	add	r7, sp, #0
 8001308:	4603      	mov	r3, r0
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
 800130e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001314:	f7ff ff5c 	bl	80011d0 <__NVIC_GetPriorityGrouping>
 8001318:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	68b9      	ldr	r1, [r7, #8]
 800131e:	6978      	ldr	r0, [r7, #20]
 8001320:	f7ff ff8e 	bl	8001240 <NVIC_EncodePriority>
 8001324:	4602      	mov	r2, r0
 8001326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132a:	4611      	mov	r1, r2
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff5d 	bl	80011ec <__NVIC_SetPriority>
}
 8001332:	bf00      	nop
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff ffb0 	bl	80012a8 <SysTick_Config>
 8001348:	4603      	mov	r3, r0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001354:	b480      	push	{r7}
 8001356:	b087      	sub	sp, #28
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001362:	e17f      	b.n	8001664 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	2101      	movs	r1, #1
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	fa01 f303 	lsl.w	r3, r1, r3
 8001370:	4013      	ands	r3, r2
 8001372:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2b00      	cmp	r3, #0
 8001378:	f000 8171 	beq.w	800165e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 0303 	and.w	r3, r3, #3
 8001384:	2b01      	cmp	r3, #1
 8001386:	d005      	beq.n	8001394 <HAL_GPIO_Init+0x40>
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 0303 	and.w	r3, r3, #3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d130      	bne.n	80013f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	2203      	movs	r2, #3
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4013      	ands	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	68da      	ldr	r2, [r3, #12]
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013ca:	2201      	movs	r2, #1
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	4013      	ands	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	091b      	lsrs	r3, r3, #4
 80013e0:	f003 0201 	and.w	r2, r3, #1
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f003 0303 	and.w	r3, r3, #3
 80013fe:	2b03      	cmp	r3, #3
 8001400:	d118      	bne.n	8001434 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001406:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001408:	2201      	movs	r2, #1
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4013      	ands	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	08db      	lsrs	r3, r3, #3
 800141e:	f003 0201 	and.w	r2, r3, #1
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 0303 	and.w	r3, r3, #3
 800143c:	2b03      	cmp	r3, #3
 800143e:	d017      	beq.n	8001470 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	2203      	movs	r2, #3
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	4313      	orrs	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 0303 	and.w	r3, r3, #3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d123      	bne.n	80014c4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	08da      	lsrs	r2, r3, #3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3208      	adds	r2, #8
 8001484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001488:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	f003 0307 	and.w	r3, r3, #7
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	220f      	movs	r2, #15
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	4013      	ands	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	691a      	ldr	r2, [r3, #16]
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	08da      	lsrs	r2, r3, #3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3208      	adds	r2, #8
 80014be:	6939      	ldr	r1, [r7, #16]
 80014c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	2203      	movs	r2, #3
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	4013      	ands	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 0203 	and.w	r2, r3, #3
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001500:	2b00      	cmp	r3, #0
 8001502:	f000 80ac 	beq.w	800165e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001506:	4b5f      	ldr	r3, [pc, #380]	@ (8001684 <HAL_GPIO_Init+0x330>)
 8001508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800150a:	4a5e      	ldr	r2, [pc, #376]	@ (8001684 <HAL_GPIO_Init+0x330>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6613      	str	r3, [r2, #96]	@ 0x60
 8001512:	4b5c      	ldr	r3, [pc, #368]	@ (8001684 <HAL_GPIO_Init+0x330>)
 8001514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800151e:	4a5a      	ldr	r2, [pc, #360]	@ (8001688 <HAL_GPIO_Init+0x334>)
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	089b      	lsrs	r3, r3, #2
 8001524:	3302      	adds	r3, #2
 8001526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f003 0303 	and.w	r3, r3, #3
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	220f      	movs	r2, #15
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001548:	d025      	beq.n	8001596 <HAL_GPIO_Init+0x242>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a4f      	ldr	r2, [pc, #316]	@ (800168c <HAL_GPIO_Init+0x338>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d01f      	beq.n	8001592 <HAL_GPIO_Init+0x23e>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a4e      	ldr	r2, [pc, #312]	@ (8001690 <HAL_GPIO_Init+0x33c>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d019      	beq.n	800158e <HAL_GPIO_Init+0x23a>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a4d      	ldr	r2, [pc, #308]	@ (8001694 <HAL_GPIO_Init+0x340>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d013      	beq.n	800158a <HAL_GPIO_Init+0x236>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a4c      	ldr	r2, [pc, #304]	@ (8001698 <HAL_GPIO_Init+0x344>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d00d      	beq.n	8001586 <HAL_GPIO_Init+0x232>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a4b      	ldr	r2, [pc, #300]	@ (800169c <HAL_GPIO_Init+0x348>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d007      	beq.n	8001582 <HAL_GPIO_Init+0x22e>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a4a      	ldr	r2, [pc, #296]	@ (80016a0 <HAL_GPIO_Init+0x34c>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d101      	bne.n	800157e <HAL_GPIO_Init+0x22a>
 800157a:	2306      	movs	r3, #6
 800157c:	e00c      	b.n	8001598 <HAL_GPIO_Init+0x244>
 800157e:	2307      	movs	r3, #7
 8001580:	e00a      	b.n	8001598 <HAL_GPIO_Init+0x244>
 8001582:	2305      	movs	r3, #5
 8001584:	e008      	b.n	8001598 <HAL_GPIO_Init+0x244>
 8001586:	2304      	movs	r3, #4
 8001588:	e006      	b.n	8001598 <HAL_GPIO_Init+0x244>
 800158a:	2303      	movs	r3, #3
 800158c:	e004      	b.n	8001598 <HAL_GPIO_Init+0x244>
 800158e:	2302      	movs	r3, #2
 8001590:	e002      	b.n	8001598 <HAL_GPIO_Init+0x244>
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <HAL_GPIO_Init+0x244>
 8001596:	2300      	movs	r3, #0
 8001598:	697a      	ldr	r2, [r7, #20]
 800159a:	f002 0203 	and.w	r2, r2, #3
 800159e:	0092      	lsls	r2, r2, #2
 80015a0:	4093      	lsls	r3, r2
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015a8:	4937      	ldr	r1, [pc, #220]	@ (8001688 <HAL_GPIO_Init+0x334>)
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	089b      	lsrs	r3, r3, #2
 80015ae:	3302      	adds	r3, #2
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015b6:	4b3b      	ldr	r3, [pc, #236]	@ (80016a4 <HAL_GPIO_Init+0x350>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	43db      	mvns	r3, r3
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	4013      	ands	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015da:	4a32      	ldr	r2, [pc, #200]	@ (80016a4 <HAL_GPIO_Init+0x350>)
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015e0:	4b30      	ldr	r3, [pc, #192]	@ (80016a4 <HAL_GPIO_Init+0x350>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	4013      	ands	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	4313      	orrs	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001604:	4a27      	ldr	r2, [pc, #156]	@ (80016a4 <HAL_GPIO_Init+0x350>)
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800160a:	4b26      	ldr	r3, [pc, #152]	@ (80016a4 <HAL_GPIO_Init+0x350>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	43db      	mvns	r3, r3
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	4013      	ands	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4313      	orrs	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800162e:	4a1d      	ldr	r2, [pc, #116]	@ (80016a4 <HAL_GPIO_Init+0x350>)
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001634:	4b1b      	ldr	r3, [pc, #108]	@ (80016a4 <HAL_GPIO_Init+0x350>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	43db      	mvns	r3, r3
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	4013      	ands	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	4313      	orrs	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001658:	4a12      	ldr	r2, [pc, #72]	@ (80016a4 <HAL_GPIO_Init+0x350>)
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	3301      	adds	r3, #1
 8001662:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa22 f303 	lsr.w	r3, r2, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	f47f ae78 	bne.w	8001364 <HAL_GPIO_Init+0x10>
  }
}
 8001674:	bf00      	nop
 8001676:	bf00      	nop
 8001678:	371c      	adds	r7, #28
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	40021000 	.word	0x40021000
 8001688:	40010000 	.word	0x40010000
 800168c:	48000400 	.word	0x48000400
 8001690:	48000800 	.word	0x48000800
 8001694:	48000c00 	.word	0x48000c00
 8001698:	48001000 	.word	0x48001000
 800169c:	48001400 	.word	0x48001400
 80016a0:	48001800 	.word	0x48001800
 80016a4:	40010400 	.word	0x40010400

080016a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	460b      	mov	r3, r1
 80016b2:	807b      	strh	r3, [r7, #2]
 80016b4:	4613      	mov	r3, r2
 80016b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016b8:	787b      	ldrb	r3, [r7, #1]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016be:	887a      	ldrh	r2, [r7, #2]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016c4:	e002      	b.n	80016cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016c6:	887a      	ldrh	r2, [r7, #2]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016dc:	4b04      	ldr	r3, [pc, #16]	@ (80016f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	40007000 	.word	0x40007000

080016f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001702:	d130      	bne.n	8001766 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001704:	4b23      	ldr	r3, [pc, #140]	@ (8001794 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800170c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001710:	d038      	beq.n	8001784 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001712:	4b20      	ldr	r3, [pc, #128]	@ (8001794 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800171a:	4a1e      	ldr	r2, [pc, #120]	@ (8001794 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800171c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001720:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001722:	4b1d      	ldr	r3, [pc, #116]	@ (8001798 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2232      	movs	r2, #50	@ 0x32
 8001728:	fb02 f303 	mul.w	r3, r2, r3
 800172c:	4a1b      	ldr	r2, [pc, #108]	@ (800179c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800172e:	fba2 2303 	umull	r2, r3, r2, r3
 8001732:	0c9b      	lsrs	r3, r3, #18
 8001734:	3301      	adds	r3, #1
 8001736:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001738:	e002      	b.n	8001740 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	3b01      	subs	r3, #1
 800173e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001740:	4b14      	ldr	r3, [pc, #80]	@ (8001794 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001742:	695b      	ldr	r3, [r3, #20]
 8001744:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001748:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800174c:	d102      	bne.n	8001754 <HAL_PWREx_ControlVoltageScaling+0x60>
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1f2      	bne.n	800173a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001754:	4b0f      	ldr	r3, [pc, #60]	@ (8001794 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800175c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001760:	d110      	bne.n	8001784 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e00f      	b.n	8001786 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001766:	4b0b      	ldr	r3, [pc, #44]	@ (8001794 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800176e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001772:	d007      	beq.n	8001784 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001774:	4b07      	ldr	r3, [pc, #28]	@ (8001794 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800177c:	4a05      	ldr	r2, [pc, #20]	@ (8001794 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800177e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001782:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	40007000 	.word	0x40007000
 8001798:	20000090 	.word	0x20000090
 800179c:	431bde83 	.word	0x431bde83

080017a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b088      	sub	sp, #32
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e3ca      	b.n	8001f48 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017b2:	4b97      	ldr	r3, [pc, #604]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 030c 	and.w	r3, r3, #12
 80017ba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017bc:	4b94      	ldr	r3, [pc, #592]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	f003 0303 	and.w	r3, r3, #3
 80017c4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0310 	and.w	r3, r3, #16
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f000 80e4 	beq.w	800199c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d007      	beq.n	80017ea <HAL_RCC_OscConfig+0x4a>
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	2b0c      	cmp	r3, #12
 80017de:	f040 808b 	bne.w	80018f8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	f040 8087 	bne.w	80018f8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017ea:	4b89      	ldr	r3, [pc, #548]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d005      	beq.n	8001802 <HAL_RCC_OscConfig+0x62>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e3a2      	b.n	8001f48 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a1a      	ldr	r2, [r3, #32]
 8001806:	4b82      	ldr	r3, [pc, #520]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	2b00      	cmp	r3, #0
 8001810:	d004      	beq.n	800181c <HAL_RCC_OscConfig+0x7c>
 8001812:	4b7f      	ldr	r3, [pc, #508]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800181a:	e005      	b.n	8001828 <HAL_RCC_OscConfig+0x88>
 800181c:	4b7c      	ldr	r3, [pc, #496]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 800181e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001822:	091b      	lsrs	r3, r3, #4
 8001824:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001828:	4293      	cmp	r3, r2
 800182a:	d223      	bcs.n	8001874 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	4618      	mov	r0, r3
 8001832:	f000 fd55 	bl	80022e0 <RCC_SetFlashLatencyFromMSIRange>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e383      	b.n	8001f48 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001840:	4b73      	ldr	r3, [pc, #460]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a72      	ldr	r2, [pc, #456]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001846:	f043 0308 	orr.w	r3, r3, #8
 800184a:	6013      	str	r3, [r2, #0]
 800184c:	4b70      	ldr	r3, [pc, #448]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	496d      	ldr	r1, [pc, #436]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 800185a:	4313      	orrs	r3, r2
 800185c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800185e:	4b6c      	ldr	r3, [pc, #432]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	021b      	lsls	r3, r3, #8
 800186c:	4968      	ldr	r1, [pc, #416]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 800186e:	4313      	orrs	r3, r2
 8001870:	604b      	str	r3, [r1, #4]
 8001872:	e025      	b.n	80018c0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001874:	4b66      	ldr	r3, [pc, #408]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a65      	ldr	r2, [pc, #404]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 800187a:	f043 0308 	orr.w	r3, r3, #8
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	4b63      	ldr	r3, [pc, #396]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	4960      	ldr	r1, [pc, #384]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 800188e:	4313      	orrs	r3, r2
 8001890:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001892:	4b5f      	ldr	r3, [pc, #380]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	021b      	lsls	r3, r3, #8
 80018a0:	495b      	ldr	r1, [pc, #364]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d109      	bne.n	80018c0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f000 fd15 	bl	80022e0 <RCC_SetFlashLatencyFromMSIRange>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e343      	b.n	8001f48 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018c0:	f000 fc4a 	bl	8002158 <HAL_RCC_GetSysClockFreq>
 80018c4:	4602      	mov	r2, r0
 80018c6:	4b52      	ldr	r3, [pc, #328]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	091b      	lsrs	r3, r3, #4
 80018cc:	f003 030f 	and.w	r3, r3, #15
 80018d0:	4950      	ldr	r1, [pc, #320]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 80018d2:	5ccb      	ldrb	r3, [r1, r3]
 80018d4:	f003 031f 	and.w	r3, r3, #31
 80018d8:	fa22 f303 	lsr.w	r3, r2, r3
 80018dc:	4a4e      	ldr	r2, [pc, #312]	@ (8001a18 <HAL_RCC_OscConfig+0x278>)
 80018de:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018e0:	4b4e      	ldr	r3, [pc, #312]	@ (8001a1c <HAL_RCC_OscConfig+0x27c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff fbcf 	bl	8001088 <HAL_InitTick>
 80018ea:	4603      	mov	r3, r0
 80018ec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d052      	beq.n	800199a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
 80018f6:	e327      	b.n	8001f48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d032      	beq.n	8001966 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001900:	4b43      	ldr	r3, [pc, #268]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a42      	ldr	r2, [pc, #264]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800190c:	f7ff fc0c 	bl	8001128 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001914:	f7ff fc08 	bl	8001128 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e310      	b.n	8001f48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001926:	4b3a      	ldr	r3, [pc, #232]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0f0      	beq.n	8001914 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001932:	4b37      	ldr	r3, [pc, #220]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a36      	ldr	r2, [pc, #216]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001938:	f043 0308 	orr.w	r3, r3, #8
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	4b34      	ldr	r3, [pc, #208]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	4931      	ldr	r1, [pc, #196]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 800194c:	4313      	orrs	r3, r2
 800194e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001950:	4b2f      	ldr	r3, [pc, #188]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69db      	ldr	r3, [r3, #28]
 800195c:	021b      	lsls	r3, r3, #8
 800195e:	492c      	ldr	r1, [pc, #176]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001960:	4313      	orrs	r3, r2
 8001962:	604b      	str	r3, [r1, #4]
 8001964:	e01a      	b.n	800199c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001966:	4b2a      	ldr	r3, [pc, #168]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a29      	ldr	r2, [pc, #164]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 800196c:	f023 0301 	bic.w	r3, r3, #1
 8001970:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001972:	f7ff fbd9 	bl	8001128 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800197a:	f7ff fbd5 	bl	8001128 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e2dd      	b.n	8001f48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800198c:	4b20      	ldr	r3, [pc, #128]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1f0      	bne.n	800197a <HAL_RCC_OscConfig+0x1da>
 8001998:	e000      	b.n	800199c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800199a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d074      	beq.n	8001a92 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d005      	beq.n	80019ba <HAL_RCC_OscConfig+0x21a>
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	2b0c      	cmp	r3, #12
 80019b2:	d10e      	bne.n	80019d2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	2b03      	cmp	r3, #3
 80019b8:	d10b      	bne.n	80019d2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ba:	4b15      	ldr	r3, [pc, #84]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d064      	beq.n	8001a90 <HAL_RCC_OscConfig+0x2f0>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d160      	bne.n	8001a90 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e2ba      	b.n	8001f48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019da:	d106      	bne.n	80019ea <HAL_RCC_OscConfig+0x24a>
 80019dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 80019e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019e6:	6013      	str	r3, [r2, #0]
 80019e8:	e026      	b.n	8001a38 <HAL_RCC_OscConfig+0x298>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019f2:	d115      	bne.n	8001a20 <HAL_RCC_OscConfig+0x280>
 80019f4:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a05      	ldr	r2, [pc, #20]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 80019fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	4b03      	ldr	r3, [pc, #12]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a02      	ldr	r2, [pc, #8]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001a06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	e014      	b.n	8001a38 <HAL_RCC_OscConfig+0x298>
 8001a0e:	bf00      	nop
 8001a10:	40021000 	.word	0x40021000
 8001a14:	08003974 	.word	0x08003974
 8001a18:	20000090 	.word	0x20000090
 8001a1c:	20000094 	.word	0x20000094
 8001a20:	4ba0      	ldr	r3, [pc, #640]	@ (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a9f      	ldr	r2, [pc, #636]	@ (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001a26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	4b9d      	ldr	r3, [pc, #628]	@ (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a9c      	ldr	r2, [pc, #624]	@ (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001a32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d013      	beq.n	8001a68 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a40:	f7ff fb72 	bl	8001128 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a48:	f7ff fb6e 	bl	8001128 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b64      	cmp	r3, #100	@ 0x64
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e276      	b.n	8001f48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a5a:	4b92      	ldr	r3, [pc, #584]	@ (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0f0      	beq.n	8001a48 <HAL_RCC_OscConfig+0x2a8>
 8001a66:	e014      	b.n	8001a92 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a68:	f7ff fb5e 	bl	8001128 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a70:	f7ff fb5a 	bl	8001128 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b64      	cmp	r3, #100	@ 0x64
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e262      	b.n	8001f48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a82:	4b88      	ldr	r3, [pc, #544]	@ (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f0      	bne.n	8001a70 <HAL_RCC_OscConfig+0x2d0>
 8001a8e:	e000      	b.n	8001a92 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d060      	beq.n	8001b60 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d005      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x310>
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	2b0c      	cmp	r3, #12
 8001aa8:	d119      	bne.n	8001ade <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d116      	bne.n	8001ade <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ab0:	4b7c      	ldr	r3, [pc, #496]	@ (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x328>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e23f      	b.n	8001f48 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac8:	4b76      	ldr	r3, [pc, #472]	@ (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	061b      	lsls	r3, r3, #24
 8001ad6:	4973      	ldr	r1, [pc, #460]	@ (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001adc:	e040      	b.n	8001b60 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d023      	beq.n	8001b2e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ae6:	4b6f      	ldr	r3, [pc, #444]	@ (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a6e      	ldr	r2, [pc, #440]	@ (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001aec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001af0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af2:	f7ff fb19 	bl	8001128 <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001afa:	f7ff fb15 	bl	8001128 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e21d      	b.n	8001f48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b0c:	4b65      	ldr	r3, [pc, #404]	@ (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0f0      	beq.n	8001afa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b18:	4b62      	ldr	r3, [pc, #392]	@ (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	061b      	lsls	r3, r3, #24
 8001b26:	495f      	ldr	r1, [pc, #380]	@ (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	604b      	str	r3, [r1, #4]
 8001b2c:	e018      	b.n	8001b60 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b2e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a5c      	ldr	r2, [pc, #368]	@ (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001b34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3a:	f7ff faf5 	bl	8001128 <HAL_GetTick>
 8001b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b42:	f7ff faf1 	bl	8001128 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e1f9      	b.n	8001f48 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b54:	4b53      	ldr	r3, [pc, #332]	@ (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1f0      	bne.n	8001b42 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0308 	and.w	r3, r3, #8
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d03c      	beq.n	8001be6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d01c      	beq.n	8001bae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b74:	4b4b      	ldr	r3, [pc, #300]	@ (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b7a:	4a4a      	ldr	r2, [pc, #296]	@ (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b84:	f7ff fad0 	bl	8001128 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b8c:	f7ff facc 	bl	8001128 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e1d4      	b.n	8001f48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b9e:	4b41      	ldr	r3, [pc, #260]	@ (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0ef      	beq.n	8001b8c <HAL_RCC_OscConfig+0x3ec>
 8001bac:	e01b      	b.n	8001be6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bae:	4b3d      	ldr	r3, [pc, #244]	@ (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001bb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bb4:	4a3b      	ldr	r2, [pc, #236]	@ (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001bb6:	f023 0301 	bic.w	r3, r3, #1
 8001bba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bbe:	f7ff fab3 	bl	8001128 <HAL_GetTick>
 8001bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc6:	f7ff faaf 	bl	8001128 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e1b7      	b.n	8001f48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bd8:	4b32      	ldr	r3, [pc, #200]	@ (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1ef      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 80a6 	beq.w	8001d40 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001bf8:	4b2a      	ldr	r3, [pc, #168]	@ (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10d      	bne.n	8001c20 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c04:	4b27      	ldr	r3, [pc, #156]	@ (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c08:	4a26      	ldr	r2, [pc, #152]	@ (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001c0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c10:	4b24      	ldr	r3, [pc, #144]	@ (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c20:	4b21      	ldr	r3, [pc, #132]	@ (8001ca8 <HAL_RCC_OscConfig+0x508>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d118      	bne.n	8001c5e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca8 <HAL_RCC_OscConfig+0x508>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a1d      	ldr	r2, [pc, #116]	@ (8001ca8 <HAL_RCC_OscConfig+0x508>)
 8001c32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c38:	f7ff fa76 	bl	8001128 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c40:	f7ff fa72 	bl	8001128 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e17a      	b.n	8001f48 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c52:	4b15      	ldr	r3, [pc, #84]	@ (8001ca8 <HAL_RCC_OscConfig+0x508>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0f0      	beq.n	8001c40 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d108      	bne.n	8001c78 <HAL_RCC_OscConfig+0x4d8>
 8001c66:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c76:	e029      	b.n	8001ccc <HAL_RCC_OscConfig+0x52c>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2b05      	cmp	r3, #5
 8001c7e:	d115      	bne.n	8001cac <HAL_RCC_OscConfig+0x50c>
 8001c80:	4b08      	ldr	r3, [pc, #32]	@ (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c86:	4a07      	ldr	r2, [pc, #28]	@ (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001c88:	f043 0304 	orr.w	r3, r3, #4
 8001c8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c90:	4b04      	ldr	r3, [pc, #16]	@ (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c96:	4a03      	ldr	r2, [pc, #12]	@ (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ca0:	e014      	b.n	8001ccc <HAL_RCC_OscConfig+0x52c>
 8001ca2:	bf00      	nop
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40007000 	.word	0x40007000
 8001cac:	4b9c      	ldr	r3, [pc, #624]	@ (8001f20 <HAL_RCC_OscConfig+0x780>)
 8001cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cb2:	4a9b      	ldr	r2, [pc, #620]	@ (8001f20 <HAL_RCC_OscConfig+0x780>)
 8001cb4:	f023 0301 	bic.w	r3, r3, #1
 8001cb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cbc:	4b98      	ldr	r3, [pc, #608]	@ (8001f20 <HAL_RCC_OscConfig+0x780>)
 8001cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cc2:	4a97      	ldr	r2, [pc, #604]	@ (8001f20 <HAL_RCC_OscConfig+0x780>)
 8001cc4:	f023 0304 	bic.w	r3, r3, #4
 8001cc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d016      	beq.n	8001d02 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd4:	f7ff fa28 	bl	8001128 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cda:	e00a      	b.n	8001cf2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cdc:	f7ff fa24 	bl	8001128 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e12a      	b.n	8001f48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cf2:	4b8b      	ldr	r3, [pc, #556]	@ (8001f20 <HAL_RCC_OscConfig+0x780>)
 8001cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0ed      	beq.n	8001cdc <HAL_RCC_OscConfig+0x53c>
 8001d00:	e015      	b.n	8001d2e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d02:	f7ff fa11 	bl	8001128 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d08:	e00a      	b.n	8001d20 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d0a:	f7ff fa0d 	bl	8001128 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e113      	b.n	8001f48 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d20:	4b7f      	ldr	r3, [pc, #508]	@ (8001f20 <HAL_RCC_OscConfig+0x780>)
 8001d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1ed      	bne.n	8001d0a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d2e:	7ffb      	ldrb	r3, [r7, #31]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d105      	bne.n	8001d40 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d34:	4b7a      	ldr	r3, [pc, #488]	@ (8001f20 <HAL_RCC_OscConfig+0x780>)
 8001d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d38:	4a79      	ldr	r2, [pc, #484]	@ (8001f20 <HAL_RCC_OscConfig+0x780>)
 8001d3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d3e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 80fe 	beq.w	8001f46 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	f040 80d0 	bne.w	8001ef4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d54:	4b72      	ldr	r3, [pc, #456]	@ (8001f20 <HAL_RCC_OscConfig+0x780>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	f003 0203 	and.w	r2, r3, #3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d130      	bne.n	8001dca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	3b01      	subs	r3, #1
 8001d74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d127      	bne.n	8001dca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d84:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d11f      	bne.n	8001dca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d94:	2a07      	cmp	r2, #7
 8001d96:	bf14      	ite	ne
 8001d98:	2201      	movne	r2, #1
 8001d9a:	2200      	moveq	r2, #0
 8001d9c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d113      	bne.n	8001dca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dac:	085b      	lsrs	r3, r3, #1
 8001dae:	3b01      	subs	r3, #1
 8001db0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d109      	bne.n	8001dca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc0:	085b      	lsrs	r3, r3, #1
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d06e      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	2b0c      	cmp	r3, #12
 8001dce:	d069      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001dd0:	4b53      	ldr	r3, [pc, #332]	@ (8001f20 <HAL_RCC_OscConfig+0x780>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d105      	bne.n	8001de8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ddc:	4b50      	ldr	r3, [pc, #320]	@ (8001f20 <HAL_RCC_OscConfig+0x780>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e0ad      	b.n	8001f48 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001dec:	4b4c      	ldr	r3, [pc, #304]	@ (8001f20 <HAL_RCC_OscConfig+0x780>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a4b      	ldr	r2, [pc, #300]	@ (8001f20 <HAL_RCC_OscConfig+0x780>)
 8001df2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001df6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001df8:	f7ff f996 	bl	8001128 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e00:	f7ff f992 	bl	8001128 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e09a      	b.n	8001f48 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e12:	4b43      	ldr	r3, [pc, #268]	@ (8001f20 <HAL_RCC_OscConfig+0x780>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f0      	bne.n	8001e00 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e1e:	4b40      	ldr	r3, [pc, #256]	@ (8001f20 <HAL_RCC_OscConfig+0x780>)
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	4b40      	ldr	r3, [pc, #256]	@ (8001f24 <HAL_RCC_OscConfig+0x784>)
 8001e24:	4013      	ands	r3, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001e2e:	3a01      	subs	r2, #1
 8001e30:	0112      	lsls	r2, r2, #4
 8001e32:	4311      	orrs	r1, r2
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001e38:	0212      	lsls	r2, r2, #8
 8001e3a:	4311      	orrs	r1, r2
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e40:	0852      	lsrs	r2, r2, #1
 8001e42:	3a01      	subs	r2, #1
 8001e44:	0552      	lsls	r2, r2, #21
 8001e46:	4311      	orrs	r1, r2
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e4c:	0852      	lsrs	r2, r2, #1
 8001e4e:	3a01      	subs	r2, #1
 8001e50:	0652      	lsls	r2, r2, #25
 8001e52:	4311      	orrs	r1, r2
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e58:	0912      	lsrs	r2, r2, #4
 8001e5a:	0452      	lsls	r2, r2, #17
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	4930      	ldr	r1, [pc, #192]	@ (8001f20 <HAL_RCC_OscConfig+0x780>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e64:	4b2e      	ldr	r3, [pc, #184]	@ (8001f20 <HAL_RCC_OscConfig+0x780>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a2d      	ldr	r2, [pc, #180]	@ (8001f20 <HAL_RCC_OscConfig+0x780>)
 8001e6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e70:	4b2b      	ldr	r3, [pc, #172]	@ (8001f20 <HAL_RCC_OscConfig+0x780>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	4a2a      	ldr	r2, [pc, #168]	@ (8001f20 <HAL_RCC_OscConfig+0x780>)
 8001e76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e7c:	f7ff f954 	bl	8001128 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e84:	f7ff f950 	bl	8001128 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e058      	b.n	8001f48 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e96:	4b22      	ldr	r3, [pc, #136]	@ (8001f20 <HAL_RCC_OscConfig+0x780>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0f0      	beq.n	8001e84 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ea2:	e050      	b.n	8001f46 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e04f      	b.n	8001f48 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f20 <HAL_RCC_OscConfig+0x780>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d148      	bne.n	8001f46 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f20 <HAL_RCC_OscConfig+0x780>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a19      	ldr	r2, [pc, #100]	@ (8001f20 <HAL_RCC_OscConfig+0x780>)
 8001eba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ebe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ec0:	4b17      	ldr	r3, [pc, #92]	@ (8001f20 <HAL_RCC_OscConfig+0x780>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	4a16      	ldr	r2, [pc, #88]	@ (8001f20 <HAL_RCC_OscConfig+0x780>)
 8001ec6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001eca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ecc:	f7ff f92c 	bl	8001128 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed4:	f7ff f928 	bl	8001128 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e030      	b.n	8001f48 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f20 <HAL_RCC_OscConfig+0x780>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0f0      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x734>
 8001ef2:	e028      	b.n	8001f46 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	2b0c      	cmp	r3, #12
 8001ef8:	d023      	beq.n	8001f42 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001efa:	4b09      	ldr	r3, [pc, #36]	@ (8001f20 <HAL_RCC_OscConfig+0x780>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a08      	ldr	r2, [pc, #32]	@ (8001f20 <HAL_RCC_OscConfig+0x780>)
 8001f00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f06:	f7ff f90f 	bl	8001128 <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f0c:	e00c      	b.n	8001f28 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f0e:	f7ff f90b 	bl	8001128 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d905      	bls.n	8001f28 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e013      	b.n	8001f48 <HAL_RCC_OscConfig+0x7a8>
 8001f20:	40021000 	.word	0x40021000
 8001f24:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f28:	4b09      	ldr	r3, [pc, #36]	@ (8001f50 <HAL_RCC_OscConfig+0x7b0>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1ec      	bne.n	8001f0e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f34:	4b06      	ldr	r3, [pc, #24]	@ (8001f50 <HAL_RCC_OscConfig+0x7b0>)
 8001f36:	68da      	ldr	r2, [r3, #12]
 8001f38:	4905      	ldr	r1, [pc, #20]	@ (8001f50 <HAL_RCC_OscConfig+0x7b0>)
 8001f3a:	4b06      	ldr	r3, [pc, #24]	@ (8001f54 <HAL_RCC_OscConfig+0x7b4>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	60cb      	str	r3, [r1, #12]
 8001f40:	e001      	b.n	8001f46 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e000      	b.n	8001f48 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3720      	adds	r7, #32
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40021000 	.word	0x40021000
 8001f54:	feeefffc 	.word	0xfeeefffc

08001f58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e0e7      	b.n	800213c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f6c:	4b75      	ldr	r3, [pc, #468]	@ (8002144 <HAL_RCC_ClockConfig+0x1ec>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d910      	bls.n	8001f9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7a:	4b72      	ldr	r3, [pc, #456]	@ (8002144 <HAL_RCC_ClockConfig+0x1ec>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f023 0207 	bic.w	r2, r3, #7
 8001f82:	4970      	ldr	r1, [pc, #448]	@ (8002144 <HAL_RCC_ClockConfig+0x1ec>)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8a:	4b6e      	ldr	r3, [pc, #440]	@ (8002144 <HAL_RCC_ClockConfig+0x1ec>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d001      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e0cf      	b.n	800213c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d010      	beq.n	8001fca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	4b66      	ldr	r3, [pc, #408]	@ (8002148 <HAL_RCC_ClockConfig+0x1f0>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d908      	bls.n	8001fca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb8:	4b63      	ldr	r3, [pc, #396]	@ (8002148 <HAL_RCC_ClockConfig+0x1f0>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	4960      	ldr	r1, [pc, #384]	@ (8002148 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d04c      	beq.n	8002070 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	d107      	bne.n	8001fee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fde:	4b5a      	ldr	r3, [pc, #360]	@ (8002148 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d121      	bne.n	800202e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e0a6      	b.n	800213c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d107      	bne.n	8002006 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ff6:	4b54      	ldr	r3, [pc, #336]	@ (8002148 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d115      	bne.n	800202e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e09a      	b.n	800213c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d107      	bne.n	800201e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800200e:	4b4e      	ldr	r3, [pc, #312]	@ (8002148 <HAL_RCC_ClockConfig+0x1f0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d109      	bne.n	800202e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e08e      	b.n	800213c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800201e:	4b4a      	ldr	r3, [pc, #296]	@ (8002148 <HAL_RCC_ClockConfig+0x1f0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e086      	b.n	800213c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800202e:	4b46      	ldr	r3, [pc, #280]	@ (8002148 <HAL_RCC_ClockConfig+0x1f0>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f023 0203 	bic.w	r2, r3, #3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	4943      	ldr	r1, [pc, #268]	@ (8002148 <HAL_RCC_ClockConfig+0x1f0>)
 800203c:	4313      	orrs	r3, r2
 800203e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002040:	f7ff f872 	bl	8001128 <HAL_GetTick>
 8002044:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002046:	e00a      	b.n	800205e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002048:	f7ff f86e 	bl	8001128 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002056:	4293      	cmp	r3, r2
 8002058:	d901      	bls.n	800205e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e06e      	b.n	800213c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205e:	4b3a      	ldr	r3, [pc, #232]	@ (8002148 <HAL_RCC_ClockConfig+0x1f0>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 020c 	and.w	r2, r3, #12
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	429a      	cmp	r2, r3
 800206e:	d1eb      	bne.n	8002048 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d010      	beq.n	800209e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	4b31      	ldr	r3, [pc, #196]	@ (8002148 <HAL_RCC_ClockConfig+0x1f0>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002088:	429a      	cmp	r2, r3
 800208a:	d208      	bcs.n	800209e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800208c:	4b2e      	ldr	r3, [pc, #184]	@ (8002148 <HAL_RCC_ClockConfig+0x1f0>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	492b      	ldr	r1, [pc, #172]	@ (8002148 <HAL_RCC_ClockConfig+0x1f0>)
 800209a:	4313      	orrs	r3, r2
 800209c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800209e:	4b29      	ldr	r3, [pc, #164]	@ (8002144 <HAL_RCC_ClockConfig+0x1ec>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d210      	bcs.n	80020ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ac:	4b25      	ldr	r3, [pc, #148]	@ (8002144 <HAL_RCC_ClockConfig+0x1ec>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f023 0207 	bic.w	r2, r3, #7
 80020b4:	4923      	ldr	r1, [pc, #140]	@ (8002144 <HAL_RCC_ClockConfig+0x1ec>)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020bc:	4b21      	ldr	r3, [pc, #132]	@ (8002144 <HAL_RCC_ClockConfig+0x1ec>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d001      	beq.n	80020ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e036      	b.n	800213c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d008      	beq.n	80020ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020da:	4b1b      	ldr	r3, [pc, #108]	@ (8002148 <HAL_RCC_ClockConfig+0x1f0>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	4918      	ldr	r1, [pc, #96]	@ (8002148 <HAL_RCC_ClockConfig+0x1f0>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0308 	and.w	r3, r3, #8
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d009      	beq.n	800210c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020f8:	4b13      	ldr	r3, [pc, #76]	@ (8002148 <HAL_RCC_ClockConfig+0x1f0>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	4910      	ldr	r1, [pc, #64]	@ (8002148 <HAL_RCC_ClockConfig+0x1f0>)
 8002108:	4313      	orrs	r3, r2
 800210a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800210c:	f000 f824 	bl	8002158 <HAL_RCC_GetSysClockFreq>
 8002110:	4602      	mov	r2, r0
 8002112:	4b0d      	ldr	r3, [pc, #52]	@ (8002148 <HAL_RCC_ClockConfig+0x1f0>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	091b      	lsrs	r3, r3, #4
 8002118:	f003 030f 	and.w	r3, r3, #15
 800211c:	490b      	ldr	r1, [pc, #44]	@ (800214c <HAL_RCC_ClockConfig+0x1f4>)
 800211e:	5ccb      	ldrb	r3, [r1, r3]
 8002120:	f003 031f 	and.w	r3, r3, #31
 8002124:	fa22 f303 	lsr.w	r3, r2, r3
 8002128:	4a09      	ldr	r2, [pc, #36]	@ (8002150 <HAL_RCC_ClockConfig+0x1f8>)
 800212a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800212c:	4b09      	ldr	r3, [pc, #36]	@ (8002154 <HAL_RCC_ClockConfig+0x1fc>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f7fe ffa9 	bl	8001088 <HAL_InitTick>
 8002136:	4603      	mov	r3, r0
 8002138:	72fb      	strb	r3, [r7, #11]

  return status;
 800213a:	7afb      	ldrb	r3, [r7, #11]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40022000 	.word	0x40022000
 8002148:	40021000 	.word	0x40021000
 800214c:	08003974 	.word	0x08003974
 8002150:	20000090 	.word	0x20000090
 8002154:	20000094 	.word	0x20000094

08002158 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002158:	b480      	push	{r7}
 800215a:	b089      	sub	sp, #36	@ 0x24
 800215c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
 8002162:	2300      	movs	r3, #0
 8002164:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002166:	4b3e      	ldr	r3, [pc, #248]	@ (8002260 <HAL_RCC_GetSysClockFreq+0x108>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 030c 	and.w	r3, r3, #12
 800216e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002170:	4b3b      	ldr	r3, [pc, #236]	@ (8002260 <HAL_RCC_GetSysClockFreq+0x108>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f003 0303 	and.w	r3, r3, #3
 8002178:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d005      	beq.n	800218c <HAL_RCC_GetSysClockFreq+0x34>
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	2b0c      	cmp	r3, #12
 8002184:	d121      	bne.n	80021ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d11e      	bne.n	80021ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800218c:	4b34      	ldr	r3, [pc, #208]	@ (8002260 <HAL_RCC_GetSysClockFreq+0x108>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0308 	and.w	r3, r3, #8
 8002194:	2b00      	cmp	r3, #0
 8002196:	d107      	bne.n	80021a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002198:	4b31      	ldr	r3, [pc, #196]	@ (8002260 <HAL_RCC_GetSysClockFreq+0x108>)
 800219a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800219e:	0a1b      	lsrs	r3, r3, #8
 80021a0:	f003 030f 	and.w	r3, r3, #15
 80021a4:	61fb      	str	r3, [r7, #28]
 80021a6:	e005      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002260 <HAL_RCC_GetSysClockFreq+0x108>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80021b4:	4a2b      	ldr	r2, [pc, #172]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x10c>)
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10d      	bne.n	80021e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021c8:	e00a      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d102      	bne.n	80021d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021d0:	4b25      	ldr	r3, [pc, #148]	@ (8002268 <HAL_RCC_GetSysClockFreq+0x110>)
 80021d2:	61bb      	str	r3, [r7, #24]
 80021d4:	e004      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d101      	bne.n	80021e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021dc:	4b23      	ldr	r3, [pc, #140]	@ (800226c <HAL_RCC_GetSysClockFreq+0x114>)
 80021de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	2b0c      	cmp	r3, #12
 80021e4:	d134      	bne.n	8002250 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002260 <HAL_RCC_GetSysClockFreq+0x108>)
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d003      	beq.n	80021fe <HAL_RCC_GetSysClockFreq+0xa6>
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2b03      	cmp	r3, #3
 80021fa:	d003      	beq.n	8002204 <HAL_RCC_GetSysClockFreq+0xac>
 80021fc:	e005      	b.n	800220a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002268 <HAL_RCC_GetSysClockFreq+0x110>)
 8002200:	617b      	str	r3, [r7, #20]
      break;
 8002202:	e005      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002204:	4b19      	ldr	r3, [pc, #100]	@ (800226c <HAL_RCC_GetSysClockFreq+0x114>)
 8002206:	617b      	str	r3, [r7, #20]
      break;
 8002208:	e002      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	617b      	str	r3, [r7, #20]
      break;
 800220e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002210:	4b13      	ldr	r3, [pc, #76]	@ (8002260 <HAL_RCC_GetSysClockFreq+0x108>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	091b      	lsrs	r3, r3, #4
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	3301      	adds	r3, #1
 800221c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800221e:	4b10      	ldr	r3, [pc, #64]	@ (8002260 <HAL_RCC_GetSysClockFreq+0x108>)
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	0a1b      	lsrs	r3, r3, #8
 8002224:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	fb03 f202 	mul.w	r2, r3, r2
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	fbb2 f3f3 	udiv	r3, r2, r3
 8002234:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002236:	4b0a      	ldr	r3, [pc, #40]	@ (8002260 <HAL_RCC_GetSysClockFreq+0x108>)
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	0e5b      	lsrs	r3, r3, #25
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	3301      	adds	r3, #1
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	fbb2 f3f3 	udiv	r3, r2, r3
 800224e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002250:	69bb      	ldr	r3, [r7, #24]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3724      	adds	r7, #36	@ 0x24
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	40021000 	.word	0x40021000
 8002264:	0800398c 	.word	0x0800398c
 8002268:	00f42400 	.word	0x00f42400
 800226c:	007a1200 	.word	0x007a1200

08002270 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002274:	4b03      	ldr	r3, [pc, #12]	@ (8002284 <HAL_RCC_GetHCLKFreq+0x14>)
 8002276:	681b      	ldr	r3, [r3, #0]
}
 8002278:	4618      	mov	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000090 	.word	0x20000090

08002288 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800228c:	f7ff fff0 	bl	8002270 <HAL_RCC_GetHCLKFreq>
 8002290:	4602      	mov	r2, r0
 8002292:	4b06      	ldr	r3, [pc, #24]	@ (80022ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	0a1b      	lsrs	r3, r3, #8
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	4904      	ldr	r1, [pc, #16]	@ (80022b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800229e:	5ccb      	ldrb	r3, [r1, r3]
 80022a0:	f003 031f 	and.w	r3, r3, #31
 80022a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40021000 	.word	0x40021000
 80022b0:	08003984 	.word	0x08003984

080022b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80022b8:	f7ff ffda 	bl	8002270 <HAL_RCC_GetHCLKFreq>
 80022bc:	4602      	mov	r2, r0
 80022be:	4b06      	ldr	r3, [pc, #24]	@ (80022d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	0adb      	lsrs	r3, r3, #11
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	4904      	ldr	r1, [pc, #16]	@ (80022dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80022ca:	5ccb      	ldrb	r3, [r1, r3]
 80022cc:	f003 031f 	and.w	r3, r3, #31
 80022d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40021000 	.word	0x40021000
 80022dc:	08003984 	.word	0x08003984

080022e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022e8:	2300      	movs	r3, #0
 80022ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002398 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022f8:	f7ff f9ee 	bl	80016d8 <HAL_PWREx_GetVoltageRange>
 80022fc:	6178      	str	r0, [r7, #20]
 80022fe:	e014      	b.n	800232a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002300:	4b25      	ldr	r3, [pc, #148]	@ (8002398 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002304:	4a24      	ldr	r2, [pc, #144]	@ (8002398 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002306:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800230a:	6593      	str	r3, [r2, #88]	@ 0x58
 800230c:	4b22      	ldr	r3, [pc, #136]	@ (8002398 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800230e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002310:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002318:	f7ff f9de 	bl	80016d8 <HAL_PWREx_GetVoltageRange>
 800231c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800231e:	4b1e      	ldr	r3, [pc, #120]	@ (8002398 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002322:	4a1d      	ldr	r2, [pc, #116]	@ (8002398 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002324:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002328:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002330:	d10b      	bne.n	800234a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b80      	cmp	r3, #128	@ 0x80
 8002336:	d919      	bls.n	800236c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2ba0      	cmp	r3, #160	@ 0xa0
 800233c:	d902      	bls.n	8002344 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800233e:	2302      	movs	r3, #2
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	e013      	b.n	800236c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002344:	2301      	movs	r3, #1
 8002346:	613b      	str	r3, [r7, #16]
 8002348:	e010      	b.n	800236c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b80      	cmp	r3, #128	@ 0x80
 800234e:	d902      	bls.n	8002356 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002350:	2303      	movs	r3, #3
 8002352:	613b      	str	r3, [r7, #16]
 8002354:	e00a      	b.n	800236c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b80      	cmp	r3, #128	@ 0x80
 800235a:	d102      	bne.n	8002362 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800235c:	2302      	movs	r3, #2
 800235e:	613b      	str	r3, [r7, #16]
 8002360:	e004      	b.n	800236c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b70      	cmp	r3, #112	@ 0x70
 8002366:	d101      	bne.n	800236c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002368:	2301      	movs	r3, #1
 800236a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800236c:	4b0b      	ldr	r3, [pc, #44]	@ (800239c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f023 0207 	bic.w	r2, r3, #7
 8002374:	4909      	ldr	r1, [pc, #36]	@ (800239c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800237c:	4b07      	ldr	r3, [pc, #28]	@ (800239c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	429a      	cmp	r2, r3
 8002388:	d001      	beq.n	800238e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40021000 	.word	0x40021000
 800239c:	40022000 	.word	0x40022000

080023a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023a8:	2300      	movs	r3, #0
 80023aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023ac:	2300      	movs	r3, #0
 80023ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d041      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023c0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80023c4:	d02a      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80023c6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80023ca:	d824      	bhi.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80023d0:	d008      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80023d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80023d6:	d81e      	bhi.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00a      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80023dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023e0:	d010      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80023e2:	e018      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023e4:	4b86      	ldr	r3, [pc, #536]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	4a85      	ldr	r2, [pc, #532]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023ee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023f0:	e015      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3304      	adds	r3, #4
 80023f6:	2100      	movs	r1, #0
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 fabb 	bl	8002974 <RCCEx_PLLSAI1_Config>
 80023fe:	4603      	mov	r3, r0
 8002400:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002402:	e00c      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3320      	adds	r3, #32
 8002408:	2100      	movs	r1, #0
 800240a:	4618      	mov	r0, r3
 800240c:	f000 fba6 	bl	8002b5c <RCCEx_PLLSAI2_Config>
 8002410:	4603      	mov	r3, r0
 8002412:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002414:	e003      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	74fb      	strb	r3, [r7, #19]
      break;
 800241a:	e000      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800241c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800241e:	7cfb      	ldrb	r3, [r7, #19]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10b      	bne.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002424:	4b76      	ldr	r3, [pc, #472]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800242a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002432:	4973      	ldr	r1, [pc, #460]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002434:	4313      	orrs	r3, r2
 8002436:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800243a:	e001      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800243c:	7cfb      	ldrb	r3, [r7, #19]
 800243e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d041      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002450:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002454:	d02a      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002456:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800245a:	d824      	bhi.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800245c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002460:	d008      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002462:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002466:	d81e      	bhi.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00a      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800246c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002470:	d010      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002472:	e018      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002474:	4b62      	ldr	r3, [pc, #392]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	4a61      	ldr	r2, [pc, #388]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800247a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800247e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002480:	e015      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3304      	adds	r3, #4
 8002486:	2100      	movs	r1, #0
 8002488:	4618      	mov	r0, r3
 800248a:	f000 fa73 	bl	8002974 <RCCEx_PLLSAI1_Config>
 800248e:	4603      	mov	r3, r0
 8002490:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002492:	e00c      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3320      	adds	r3, #32
 8002498:	2100      	movs	r1, #0
 800249a:	4618      	mov	r0, r3
 800249c:	f000 fb5e 	bl	8002b5c <RCCEx_PLLSAI2_Config>
 80024a0:	4603      	mov	r3, r0
 80024a2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024a4:	e003      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	74fb      	strb	r3, [r7, #19]
      break;
 80024aa:	e000      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80024ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024ae:	7cfb      	ldrb	r3, [r7, #19]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10b      	bne.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024b4:	4b52      	ldr	r3, [pc, #328]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024c2:	494f      	ldr	r1, [pc, #316]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80024ca:	e001      	b.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024cc:	7cfb      	ldrb	r3, [r7, #19]
 80024ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 80a0 	beq.w	800261e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024de:	2300      	movs	r3, #0
 80024e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024e2:	4b47      	ldr	r3, [pc, #284]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80024ee:	2301      	movs	r3, #1
 80024f0:	e000      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80024f2:	2300      	movs	r3, #0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00d      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024f8:	4b41      	ldr	r3, [pc, #260]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fc:	4a40      	ldr	r2, [pc, #256]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002502:	6593      	str	r3, [r2, #88]	@ 0x58
 8002504:	4b3e      	ldr	r3, [pc, #248]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002508:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002510:	2301      	movs	r3, #1
 8002512:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002514:	4b3b      	ldr	r3, [pc, #236]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a3a      	ldr	r2, [pc, #232]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800251a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800251e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002520:	f7fe fe02 	bl	8001128 <HAL_GetTick>
 8002524:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002526:	e009      	b.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002528:	f7fe fdfe 	bl	8001128 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d902      	bls.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	74fb      	strb	r3, [r7, #19]
        break;
 800253a:	e005      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800253c:	4b31      	ldr	r3, [pc, #196]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0ef      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002548:	7cfb      	ldrb	r3, [r7, #19]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d15c      	bne.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800254e:	4b2c      	ldr	r3, [pc, #176]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002554:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002558:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d01f      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	429a      	cmp	r2, r3
 800256a:	d019      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800256c:	4b24      	ldr	r3, [pc, #144]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800256e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002572:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002576:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002578:	4b21      	ldr	r3, [pc, #132]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800257a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800257e:	4a20      	ldr	r2, [pc, #128]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002580:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002584:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002588:	4b1d      	ldr	r3, [pc, #116]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800258a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800258e:	4a1c      	ldr	r2, [pc, #112]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002590:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002594:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002598:	4a19      	ldr	r2, [pc, #100]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d016      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025aa:	f7fe fdbd 	bl	8001128 <HAL_GetTick>
 80025ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025b0:	e00b      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b2:	f7fe fdb9 	bl	8001128 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d902      	bls.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	74fb      	strb	r3, [r7, #19]
            break;
 80025c8:	e006      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0ec      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80025d8:	7cfb      	ldrb	r3, [r7, #19]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10c      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025de:	4b08      	ldr	r3, [pc, #32]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025ee:	4904      	ldr	r1, [pc, #16]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80025f6:	e009      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025f8:	7cfb      	ldrb	r3, [r7, #19]
 80025fa:	74bb      	strb	r3, [r7, #18]
 80025fc:	e006      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80025fe:	bf00      	nop
 8002600:	40021000 	.word	0x40021000
 8002604:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002608:	7cfb      	ldrb	r3, [r7, #19]
 800260a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800260c:	7c7b      	ldrb	r3, [r7, #17]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d105      	bne.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002612:	4b9e      	ldr	r3, [pc, #632]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002616:	4a9d      	ldr	r2, [pc, #628]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002618:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800261c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00a      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800262a:	4b98      	ldr	r3, [pc, #608]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002630:	f023 0203 	bic.w	r2, r3, #3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002638:	4994      	ldr	r1, [pc, #592]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263a:	4313      	orrs	r3, r2
 800263c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00a      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800264c:	4b8f      	ldr	r3, [pc, #572]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002652:	f023 020c 	bic.w	r2, r3, #12
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800265a:	498c      	ldr	r1, [pc, #560]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265c:	4313      	orrs	r3, r2
 800265e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00a      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800266e:	4b87      	ldr	r3, [pc, #540]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002674:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267c:	4983      	ldr	r1, [pc, #524]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267e:	4313      	orrs	r3, r2
 8002680:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0308 	and.w	r3, r3, #8
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00a      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002690:	4b7e      	ldr	r3, [pc, #504]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002696:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269e:	497b      	ldr	r1, [pc, #492]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0310 	and.w	r3, r3, #16
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00a      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026b2:	4b76      	ldr	r3, [pc, #472]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026c0:	4972      	ldr	r1, [pc, #456]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0320 	and.w	r3, r3, #32
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00a      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026d4:	4b6d      	ldr	r3, [pc, #436]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026e2:	496a      	ldr	r1, [pc, #424]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00a      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026f6:	4b65      	ldr	r3, [pc, #404]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002704:	4961      	ldr	r1, [pc, #388]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002706:	4313      	orrs	r3, r2
 8002708:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00a      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002718:	4b5c      	ldr	r3, [pc, #368]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800271a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800271e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002726:	4959      	ldr	r1, [pc, #356]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002728:	4313      	orrs	r3, r2
 800272a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00a      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800273a:	4b54      	ldr	r3, [pc, #336]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002740:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002748:	4950      	ldr	r1, [pc, #320]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274a:	4313      	orrs	r3, r2
 800274c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00a      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800275c:	4b4b      	ldr	r3, [pc, #300]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002762:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800276a:	4948      	ldr	r1, [pc, #288]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276c:	4313      	orrs	r3, r2
 800276e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00a      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800277e:	4b43      	ldr	r3, [pc, #268]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002784:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800278c:	493f      	ldr	r1, [pc, #252]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278e:	4313      	orrs	r3, r2
 8002790:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d028      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027a0:	4b3a      	ldr	r3, [pc, #232]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027ae:	4937      	ldr	r1, [pc, #220]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027be:	d106      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027c0:	4b32      	ldr	r3, [pc, #200]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	4a31      	ldr	r2, [pc, #196]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027ca:	60d3      	str	r3, [r2, #12]
 80027cc:	e011      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027d6:	d10c      	bne.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3304      	adds	r3, #4
 80027dc:	2101      	movs	r1, #1
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 f8c8 	bl	8002974 <RCCEx_PLLSAI1_Config>
 80027e4:	4603      	mov	r3, r0
 80027e6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80027e8:	7cfb      	ldrb	r3, [r7, #19]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80027ee:	7cfb      	ldrb	r3, [r7, #19]
 80027f0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d028      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027fe:	4b23      	ldr	r3, [pc, #140]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002804:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800280c:	491f      	ldr	r1, [pc, #124]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280e:	4313      	orrs	r3, r2
 8002810:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002818:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800281c:	d106      	bne.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800281e:	4b1b      	ldr	r3, [pc, #108]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	4a1a      	ldr	r2, [pc, #104]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002824:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002828:	60d3      	str	r3, [r2, #12]
 800282a:	e011      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002830:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002834:	d10c      	bne.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	3304      	adds	r3, #4
 800283a:	2101      	movs	r1, #1
 800283c:	4618      	mov	r0, r3
 800283e:	f000 f899 	bl	8002974 <RCCEx_PLLSAI1_Config>
 8002842:	4603      	mov	r3, r0
 8002844:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002846:	7cfb      	ldrb	r3, [r7, #19]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800284c:	7cfb      	ldrb	r3, [r7, #19]
 800284e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d02b      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800285c:	4b0b      	ldr	r3, [pc, #44]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002862:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800286a:	4908      	ldr	r1, [pc, #32]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002876:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800287a:	d109      	bne.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800287c:	4b03      	ldr	r3, [pc, #12]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	4a02      	ldr	r2, [pc, #8]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002882:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002886:	60d3      	str	r3, [r2, #12]
 8002888:	e014      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800288a:	bf00      	nop
 800288c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002894:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002898:	d10c      	bne.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	3304      	adds	r3, #4
 800289e:	2101      	movs	r1, #1
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 f867 	bl	8002974 <RCCEx_PLLSAI1_Config>
 80028a6:	4603      	mov	r3, r0
 80028a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028aa:	7cfb      	ldrb	r3, [r7, #19]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80028b0:	7cfb      	ldrb	r3, [r7, #19]
 80028b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d02f      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028ce:	4928      	ldr	r1, [pc, #160]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80028de:	d10d      	bne.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3304      	adds	r3, #4
 80028e4:	2102      	movs	r1, #2
 80028e6:	4618      	mov	r0, r3
 80028e8:	f000 f844 	bl	8002974 <RCCEx_PLLSAI1_Config>
 80028ec:	4603      	mov	r3, r0
 80028ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028f0:	7cfb      	ldrb	r3, [r7, #19]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d014      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028f6:	7cfb      	ldrb	r3, [r7, #19]
 80028f8:	74bb      	strb	r3, [r7, #18]
 80028fa:	e011      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002900:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002904:	d10c      	bne.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3320      	adds	r3, #32
 800290a:	2102      	movs	r1, #2
 800290c:	4618      	mov	r0, r3
 800290e:	f000 f925 	bl	8002b5c <RCCEx_PLLSAI2_Config>
 8002912:	4603      	mov	r3, r0
 8002914:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002916:	7cfb      	ldrb	r3, [r7, #19]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800291c:	7cfb      	ldrb	r3, [r7, #19]
 800291e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00a      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800292c:	4b10      	ldr	r3, [pc, #64]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800292e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002932:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800293a:	490d      	ldr	r1, [pc, #52]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800293c:	4313      	orrs	r3, r2
 800293e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00b      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800294e:	4b08      	ldr	r3, [pc, #32]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002954:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800295e:	4904      	ldr	r1, [pc, #16]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002960:	4313      	orrs	r3, r2
 8002962:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002966:	7cbb      	ldrb	r3, [r7, #18]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40021000 	.word	0x40021000

08002974 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002982:	4b75      	ldr	r3, [pc, #468]	@ (8002b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d018      	beq.n	80029c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800298e:	4b72      	ldr	r3, [pc, #456]	@ (8002b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f003 0203 	and.w	r2, r3, #3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d10d      	bne.n	80029ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
       ||
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d009      	beq.n	80029ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80029a6:	4b6c      	ldr	r3, [pc, #432]	@ (8002b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	091b      	lsrs	r3, r3, #4
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	1c5a      	adds	r2, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
       ||
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d047      	beq.n	8002a4a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	73fb      	strb	r3, [r7, #15]
 80029be:	e044      	b.n	8002a4a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	d018      	beq.n	80029fa <RCCEx_PLLSAI1_Config+0x86>
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d825      	bhi.n	8002a18 <RCCEx_PLLSAI1_Config+0xa4>
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d002      	beq.n	80029d6 <RCCEx_PLLSAI1_Config+0x62>
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d009      	beq.n	80029e8 <RCCEx_PLLSAI1_Config+0x74>
 80029d4:	e020      	b.n	8002a18 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029d6:	4b60      	ldr	r3, [pc, #384]	@ (8002b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d11d      	bne.n	8002a1e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029e6:	e01a      	b.n	8002a1e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029e8:	4b5b      	ldr	r3, [pc, #364]	@ (8002b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d116      	bne.n	8002a22 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029f8:	e013      	b.n	8002a22 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029fa:	4b57      	ldr	r3, [pc, #348]	@ (8002b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10f      	bne.n	8002a26 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a06:	4b54      	ldr	r3, [pc, #336]	@ (8002b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d109      	bne.n	8002a26 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a16:	e006      	b.n	8002a26 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a1c:	e004      	b.n	8002a28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a1e:	bf00      	nop
 8002a20:	e002      	b.n	8002a28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a22:	bf00      	nop
 8002a24:	e000      	b.n	8002a28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a26:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10d      	bne.n	8002a4a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a2e:	4b4a      	ldr	r3, [pc, #296]	@ (8002b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6819      	ldr	r1, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	430b      	orrs	r3, r1
 8002a44:	4944      	ldr	r1, [pc, #272]	@ (8002b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d17d      	bne.n	8002b4c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a50:	4b41      	ldr	r3, [pc, #260]	@ (8002b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a40      	ldr	r2, [pc, #256]	@ (8002b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a56:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002a5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a5c:	f7fe fb64 	bl	8001128 <HAL_GetTick>
 8002a60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a62:	e009      	b.n	8002a78 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a64:	f7fe fb60 	bl	8001128 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d902      	bls.n	8002a78 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	73fb      	strb	r3, [r7, #15]
        break;
 8002a76:	e005      	b.n	8002a84 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a78:	4b37      	ldr	r3, [pc, #220]	@ (8002b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1ef      	bne.n	8002a64 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d160      	bne.n	8002b4c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d111      	bne.n	8002ab4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a90:	4b31      	ldr	r3, [pc, #196]	@ (8002b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002a98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6892      	ldr	r2, [r2, #8]
 8002aa0:	0211      	lsls	r1, r2, #8
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	68d2      	ldr	r2, [r2, #12]
 8002aa6:	0912      	lsrs	r2, r2, #4
 8002aa8:	0452      	lsls	r2, r2, #17
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	492a      	ldr	r1, [pc, #168]	@ (8002b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	610b      	str	r3, [r1, #16]
 8002ab2:	e027      	b.n	8002b04 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d112      	bne.n	8002ae0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002aba:	4b27      	ldr	r3, [pc, #156]	@ (8002b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002ac2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6892      	ldr	r2, [r2, #8]
 8002aca:	0211      	lsls	r1, r2, #8
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6912      	ldr	r2, [r2, #16]
 8002ad0:	0852      	lsrs	r2, r2, #1
 8002ad2:	3a01      	subs	r2, #1
 8002ad4:	0552      	lsls	r2, r2, #21
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	491f      	ldr	r1, [pc, #124]	@ (8002b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	610b      	str	r3, [r1, #16]
 8002ade:	e011      	b.n	8002b04 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002ae8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6892      	ldr	r2, [r2, #8]
 8002af0:	0211      	lsls	r1, r2, #8
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6952      	ldr	r2, [r2, #20]
 8002af6:	0852      	lsrs	r2, r2, #1
 8002af8:	3a01      	subs	r2, #1
 8002afa:	0652      	lsls	r2, r2, #25
 8002afc:	430a      	orrs	r2, r1
 8002afe:	4916      	ldr	r1, [pc, #88]	@ (8002b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b04:	4b14      	ldr	r3, [pc, #80]	@ (8002b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a13      	ldr	r2, [pc, #76]	@ (8002b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b0a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b0e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b10:	f7fe fb0a 	bl	8001128 <HAL_GetTick>
 8002b14:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b16:	e009      	b.n	8002b2c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b18:	f7fe fb06 	bl	8001128 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d902      	bls.n	8002b2c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	73fb      	strb	r3, [r7, #15]
          break;
 8002b2a:	e005      	b.n	8002b38 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0ef      	beq.n	8002b18 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d106      	bne.n	8002b4c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b3e:	4b06      	ldr	r3, [pc, #24]	@ (8002b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b40:	691a      	ldr	r2, [r3, #16]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	4904      	ldr	r1, [pc, #16]	@ (8002b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40021000 	.word	0x40021000

08002b5c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b6a:	4b6a      	ldr	r3, [pc, #424]	@ (8002d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d018      	beq.n	8002ba8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b76:	4b67      	ldr	r3, [pc, #412]	@ (8002d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f003 0203 	and.w	r2, r3, #3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d10d      	bne.n	8002ba2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
       ||
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d009      	beq.n	8002ba2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b8e:	4b61      	ldr	r3, [pc, #388]	@ (8002d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	091b      	lsrs	r3, r3, #4
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	1c5a      	adds	r2, r3, #1
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
       ||
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d047      	beq.n	8002c32 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	73fb      	strb	r3, [r7, #15]
 8002ba6:	e044      	b.n	8002c32 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b03      	cmp	r3, #3
 8002bae:	d018      	beq.n	8002be2 <RCCEx_PLLSAI2_Config+0x86>
 8002bb0:	2b03      	cmp	r3, #3
 8002bb2:	d825      	bhi.n	8002c00 <RCCEx_PLLSAI2_Config+0xa4>
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d002      	beq.n	8002bbe <RCCEx_PLLSAI2_Config+0x62>
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d009      	beq.n	8002bd0 <RCCEx_PLLSAI2_Config+0x74>
 8002bbc:	e020      	b.n	8002c00 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bbe:	4b55      	ldr	r3, [pc, #340]	@ (8002d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d11d      	bne.n	8002c06 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bce:	e01a      	b.n	8002c06 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bd0:	4b50      	ldr	r3, [pc, #320]	@ (8002d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d116      	bne.n	8002c0a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002be0:	e013      	b.n	8002c0a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002be2:	4b4c      	ldr	r3, [pc, #304]	@ (8002d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10f      	bne.n	8002c0e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bee:	4b49      	ldr	r3, [pc, #292]	@ (8002d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d109      	bne.n	8002c0e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bfe:	e006      	b.n	8002c0e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	73fb      	strb	r3, [r7, #15]
      break;
 8002c04:	e004      	b.n	8002c10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c06:	bf00      	nop
 8002c08:	e002      	b.n	8002c10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c0a:	bf00      	nop
 8002c0c:	e000      	b.n	8002c10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10d      	bne.n	8002c32 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c16:	4b3f      	ldr	r3, [pc, #252]	@ (8002d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6819      	ldr	r1, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	430b      	orrs	r3, r1
 8002c2c:	4939      	ldr	r1, [pc, #228]	@ (8002d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d167      	bne.n	8002d08 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c38:	4b36      	ldr	r3, [pc, #216]	@ (8002d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a35      	ldr	r2, [pc, #212]	@ (8002d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c44:	f7fe fa70 	bl	8001128 <HAL_GetTick>
 8002c48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c4a:	e009      	b.n	8002c60 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c4c:	f7fe fa6c 	bl	8001128 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d902      	bls.n	8002c60 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	73fb      	strb	r3, [r7, #15]
        break;
 8002c5e:	e005      	b.n	8002c6c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c60:	4b2c      	ldr	r3, [pc, #176]	@ (8002d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1ef      	bne.n	8002c4c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c6c:	7bfb      	ldrb	r3, [r7, #15]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d14a      	bne.n	8002d08 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d111      	bne.n	8002c9c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c78:	4b26      	ldr	r3, [pc, #152]	@ (8002d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002c80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6892      	ldr	r2, [r2, #8]
 8002c88:	0211      	lsls	r1, r2, #8
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	68d2      	ldr	r2, [r2, #12]
 8002c8e:	0912      	lsrs	r2, r2, #4
 8002c90:	0452      	lsls	r2, r2, #17
 8002c92:	430a      	orrs	r2, r1
 8002c94:	491f      	ldr	r1, [pc, #124]	@ (8002d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	614b      	str	r3, [r1, #20]
 8002c9a:	e011      	b.n	8002cc0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8002d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002ca4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6892      	ldr	r2, [r2, #8]
 8002cac:	0211      	lsls	r1, r2, #8
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6912      	ldr	r2, [r2, #16]
 8002cb2:	0852      	lsrs	r2, r2, #1
 8002cb4:	3a01      	subs	r2, #1
 8002cb6:	0652      	lsls	r2, r2, #25
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	4916      	ldr	r1, [pc, #88]	@ (8002d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002cc0:	4b14      	ldr	r3, [pc, #80]	@ (8002d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a13      	ldr	r2, [pc, #76]	@ (8002d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ccc:	f7fe fa2c 	bl	8001128 <HAL_GetTick>
 8002cd0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002cd2:	e009      	b.n	8002ce8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002cd4:	f7fe fa28 	bl	8001128 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d902      	bls.n	8002ce8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	73fb      	strb	r3, [r7, #15]
          break;
 8002ce6:	e005      	b.n	8002cf4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8002d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0ef      	beq.n	8002cd4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d106      	bne.n	8002d08 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002cfa:	4b06      	ldr	r3, [pc, #24]	@ (8002d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cfc:	695a      	ldr	r2, [r3, #20]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	4904      	ldr	r1, [pc, #16]	@ (8002d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40021000 	.word	0x40021000

08002d18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e040      	b.n	8002dac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d106      	bne.n	8002d40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7fe f8c4 	bl	8000ec8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2224      	movs	r2, #36	@ 0x24
 8002d44:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0201 	bic.w	r2, r2, #1
 8002d54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d002      	beq.n	8002d64 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 fb6a 	bl	8003438 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f8af 	bl	8002ec8 <UART_SetConfig>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d101      	bne.n	8002d74 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e01b      	b.n	8002dac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0201 	orr.w	r2, r2, #1
 8002da2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 fbe9 	bl	800357c <UART_CheckIdleState>
 8002daa:	4603      	mov	r3, r0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08a      	sub	sp, #40	@ 0x28
 8002db8:	af02      	add	r7, sp, #8
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	603b      	str	r3, [r7, #0]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002dc8:	2b20      	cmp	r3, #32
 8002dca:	d177      	bne.n	8002ebc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d002      	beq.n	8002dd8 <HAL_UART_Transmit+0x24>
 8002dd2:	88fb      	ldrh	r3, [r7, #6]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e070      	b.n	8002ebe <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2221      	movs	r2, #33	@ 0x21
 8002de8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dea:	f7fe f99d 	bl	8001128 <HAL_GetTick>
 8002dee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	88fa      	ldrh	r2, [r7, #6]
 8002df4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	88fa      	ldrh	r2, [r7, #6]
 8002dfc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e08:	d108      	bne.n	8002e1c <HAL_UART_Transmit+0x68>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d104      	bne.n	8002e1c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	61bb      	str	r3, [r7, #24]
 8002e1a:	e003      	b.n	8002e24 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e24:	e02f      	b.n	8002e86 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	2180      	movs	r1, #128	@ 0x80
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f000 fc4b 	bl	80036cc <UART_WaitOnFlagUntilTimeout>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d004      	beq.n	8002e46 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e03b      	b.n	8002ebe <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10b      	bne.n	8002e64 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	881a      	ldrh	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e58:	b292      	uxth	r2, r2
 8002e5a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	3302      	adds	r3, #2
 8002e60:	61bb      	str	r3, [r7, #24]
 8002e62:	e007      	b.n	8002e74 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	781a      	ldrb	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	3301      	adds	r3, #1
 8002e72:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1c9      	bne.n	8002e26 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	2140      	movs	r1, #64	@ 0x40
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 fc15 	bl	80036cc <UART_WaitOnFlagUntilTimeout>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d004      	beq.n	8002eb2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e005      	b.n	8002ebe <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	e000      	b.n	8002ebe <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002ebc:	2302      	movs	r3, #2
  }
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3720      	adds	r7, #32
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
	...

08002ec8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ecc:	b08a      	sub	sp, #40	@ 0x28
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	4ba4      	ldr	r3, [pc, #656]	@ (8003188 <UART_SetConfig+0x2c0>)
 8002ef8:	4013      	ands	r3, r2
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	6812      	ldr	r2, [r2, #0]
 8002efe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f00:	430b      	orrs	r3, r1
 8002f02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a99      	ldr	r2, [pc, #612]	@ (800318c <UART_SetConfig+0x2c4>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d004      	beq.n	8002f34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f30:	4313      	orrs	r3, r2
 8002f32:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f44:	430a      	orrs	r2, r1
 8002f46:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a90      	ldr	r2, [pc, #576]	@ (8003190 <UART_SetConfig+0x2c8>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d126      	bne.n	8002fa0 <UART_SetConfig+0xd8>
 8002f52:	4b90      	ldr	r3, [pc, #576]	@ (8003194 <UART_SetConfig+0x2cc>)
 8002f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f58:	f003 0303 	and.w	r3, r3, #3
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d81b      	bhi.n	8002f98 <UART_SetConfig+0xd0>
 8002f60:	a201      	add	r2, pc, #4	@ (adr r2, 8002f68 <UART_SetConfig+0xa0>)
 8002f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f66:	bf00      	nop
 8002f68:	08002f79 	.word	0x08002f79
 8002f6c:	08002f89 	.word	0x08002f89
 8002f70:	08002f81 	.word	0x08002f81
 8002f74:	08002f91 	.word	0x08002f91
 8002f78:	2301      	movs	r3, #1
 8002f7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f7e:	e116      	b.n	80031ae <UART_SetConfig+0x2e6>
 8002f80:	2302      	movs	r3, #2
 8002f82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f86:	e112      	b.n	80031ae <UART_SetConfig+0x2e6>
 8002f88:	2304      	movs	r3, #4
 8002f8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f8e:	e10e      	b.n	80031ae <UART_SetConfig+0x2e6>
 8002f90:	2308      	movs	r3, #8
 8002f92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f96:	e10a      	b.n	80031ae <UART_SetConfig+0x2e6>
 8002f98:	2310      	movs	r3, #16
 8002f9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f9e:	e106      	b.n	80031ae <UART_SetConfig+0x2e6>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a7c      	ldr	r2, [pc, #496]	@ (8003198 <UART_SetConfig+0x2d0>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d138      	bne.n	800301c <UART_SetConfig+0x154>
 8002faa:	4b7a      	ldr	r3, [pc, #488]	@ (8003194 <UART_SetConfig+0x2cc>)
 8002fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb0:	f003 030c 	and.w	r3, r3, #12
 8002fb4:	2b0c      	cmp	r3, #12
 8002fb6:	d82d      	bhi.n	8003014 <UART_SetConfig+0x14c>
 8002fb8:	a201      	add	r2, pc, #4	@ (adr r2, 8002fc0 <UART_SetConfig+0xf8>)
 8002fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fbe:	bf00      	nop
 8002fc0:	08002ff5 	.word	0x08002ff5
 8002fc4:	08003015 	.word	0x08003015
 8002fc8:	08003015 	.word	0x08003015
 8002fcc:	08003015 	.word	0x08003015
 8002fd0:	08003005 	.word	0x08003005
 8002fd4:	08003015 	.word	0x08003015
 8002fd8:	08003015 	.word	0x08003015
 8002fdc:	08003015 	.word	0x08003015
 8002fe0:	08002ffd 	.word	0x08002ffd
 8002fe4:	08003015 	.word	0x08003015
 8002fe8:	08003015 	.word	0x08003015
 8002fec:	08003015 	.word	0x08003015
 8002ff0:	0800300d 	.word	0x0800300d
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ffa:	e0d8      	b.n	80031ae <UART_SetConfig+0x2e6>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003002:	e0d4      	b.n	80031ae <UART_SetConfig+0x2e6>
 8003004:	2304      	movs	r3, #4
 8003006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800300a:	e0d0      	b.n	80031ae <UART_SetConfig+0x2e6>
 800300c:	2308      	movs	r3, #8
 800300e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003012:	e0cc      	b.n	80031ae <UART_SetConfig+0x2e6>
 8003014:	2310      	movs	r3, #16
 8003016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800301a:	e0c8      	b.n	80031ae <UART_SetConfig+0x2e6>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a5e      	ldr	r2, [pc, #376]	@ (800319c <UART_SetConfig+0x2d4>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d125      	bne.n	8003072 <UART_SetConfig+0x1aa>
 8003026:	4b5b      	ldr	r3, [pc, #364]	@ (8003194 <UART_SetConfig+0x2cc>)
 8003028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800302c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003030:	2b30      	cmp	r3, #48	@ 0x30
 8003032:	d016      	beq.n	8003062 <UART_SetConfig+0x19a>
 8003034:	2b30      	cmp	r3, #48	@ 0x30
 8003036:	d818      	bhi.n	800306a <UART_SetConfig+0x1a2>
 8003038:	2b20      	cmp	r3, #32
 800303a:	d00a      	beq.n	8003052 <UART_SetConfig+0x18a>
 800303c:	2b20      	cmp	r3, #32
 800303e:	d814      	bhi.n	800306a <UART_SetConfig+0x1a2>
 8003040:	2b00      	cmp	r3, #0
 8003042:	d002      	beq.n	800304a <UART_SetConfig+0x182>
 8003044:	2b10      	cmp	r3, #16
 8003046:	d008      	beq.n	800305a <UART_SetConfig+0x192>
 8003048:	e00f      	b.n	800306a <UART_SetConfig+0x1a2>
 800304a:	2300      	movs	r3, #0
 800304c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003050:	e0ad      	b.n	80031ae <UART_SetConfig+0x2e6>
 8003052:	2302      	movs	r3, #2
 8003054:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003058:	e0a9      	b.n	80031ae <UART_SetConfig+0x2e6>
 800305a:	2304      	movs	r3, #4
 800305c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003060:	e0a5      	b.n	80031ae <UART_SetConfig+0x2e6>
 8003062:	2308      	movs	r3, #8
 8003064:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003068:	e0a1      	b.n	80031ae <UART_SetConfig+0x2e6>
 800306a:	2310      	movs	r3, #16
 800306c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003070:	e09d      	b.n	80031ae <UART_SetConfig+0x2e6>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a4a      	ldr	r2, [pc, #296]	@ (80031a0 <UART_SetConfig+0x2d8>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d125      	bne.n	80030c8 <UART_SetConfig+0x200>
 800307c:	4b45      	ldr	r3, [pc, #276]	@ (8003194 <UART_SetConfig+0x2cc>)
 800307e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003082:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003086:	2bc0      	cmp	r3, #192	@ 0xc0
 8003088:	d016      	beq.n	80030b8 <UART_SetConfig+0x1f0>
 800308a:	2bc0      	cmp	r3, #192	@ 0xc0
 800308c:	d818      	bhi.n	80030c0 <UART_SetConfig+0x1f8>
 800308e:	2b80      	cmp	r3, #128	@ 0x80
 8003090:	d00a      	beq.n	80030a8 <UART_SetConfig+0x1e0>
 8003092:	2b80      	cmp	r3, #128	@ 0x80
 8003094:	d814      	bhi.n	80030c0 <UART_SetConfig+0x1f8>
 8003096:	2b00      	cmp	r3, #0
 8003098:	d002      	beq.n	80030a0 <UART_SetConfig+0x1d8>
 800309a:	2b40      	cmp	r3, #64	@ 0x40
 800309c:	d008      	beq.n	80030b0 <UART_SetConfig+0x1e8>
 800309e:	e00f      	b.n	80030c0 <UART_SetConfig+0x1f8>
 80030a0:	2300      	movs	r3, #0
 80030a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030a6:	e082      	b.n	80031ae <UART_SetConfig+0x2e6>
 80030a8:	2302      	movs	r3, #2
 80030aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ae:	e07e      	b.n	80031ae <UART_SetConfig+0x2e6>
 80030b0:	2304      	movs	r3, #4
 80030b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030b6:	e07a      	b.n	80031ae <UART_SetConfig+0x2e6>
 80030b8:	2308      	movs	r3, #8
 80030ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030be:	e076      	b.n	80031ae <UART_SetConfig+0x2e6>
 80030c0:	2310      	movs	r3, #16
 80030c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030c6:	e072      	b.n	80031ae <UART_SetConfig+0x2e6>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a35      	ldr	r2, [pc, #212]	@ (80031a4 <UART_SetConfig+0x2dc>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d12a      	bne.n	8003128 <UART_SetConfig+0x260>
 80030d2:	4b30      	ldr	r3, [pc, #192]	@ (8003194 <UART_SetConfig+0x2cc>)
 80030d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030e0:	d01a      	beq.n	8003118 <UART_SetConfig+0x250>
 80030e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030e6:	d81b      	bhi.n	8003120 <UART_SetConfig+0x258>
 80030e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030ec:	d00c      	beq.n	8003108 <UART_SetConfig+0x240>
 80030ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030f2:	d815      	bhi.n	8003120 <UART_SetConfig+0x258>
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d003      	beq.n	8003100 <UART_SetConfig+0x238>
 80030f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030fc:	d008      	beq.n	8003110 <UART_SetConfig+0x248>
 80030fe:	e00f      	b.n	8003120 <UART_SetConfig+0x258>
 8003100:	2300      	movs	r3, #0
 8003102:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003106:	e052      	b.n	80031ae <UART_SetConfig+0x2e6>
 8003108:	2302      	movs	r3, #2
 800310a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800310e:	e04e      	b.n	80031ae <UART_SetConfig+0x2e6>
 8003110:	2304      	movs	r3, #4
 8003112:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003116:	e04a      	b.n	80031ae <UART_SetConfig+0x2e6>
 8003118:	2308      	movs	r3, #8
 800311a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800311e:	e046      	b.n	80031ae <UART_SetConfig+0x2e6>
 8003120:	2310      	movs	r3, #16
 8003122:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003126:	e042      	b.n	80031ae <UART_SetConfig+0x2e6>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a17      	ldr	r2, [pc, #92]	@ (800318c <UART_SetConfig+0x2c4>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d13a      	bne.n	80031a8 <UART_SetConfig+0x2e0>
 8003132:	4b18      	ldr	r3, [pc, #96]	@ (8003194 <UART_SetConfig+0x2cc>)
 8003134:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003138:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800313c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003140:	d01a      	beq.n	8003178 <UART_SetConfig+0x2b0>
 8003142:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003146:	d81b      	bhi.n	8003180 <UART_SetConfig+0x2b8>
 8003148:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800314c:	d00c      	beq.n	8003168 <UART_SetConfig+0x2a0>
 800314e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003152:	d815      	bhi.n	8003180 <UART_SetConfig+0x2b8>
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <UART_SetConfig+0x298>
 8003158:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800315c:	d008      	beq.n	8003170 <UART_SetConfig+0x2a8>
 800315e:	e00f      	b.n	8003180 <UART_SetConfig+0x2b8>
 8003160:	2300      	movs	r3, #0
 8003162:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003166:	e022      	b.n	80031ae <UART_SetConfig+0x2e6>
 8003168:	2302      	movs	r3, #2
 800316a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800316e:	e01e      	b.n	80031ae <UART_SetConfig+0x2e6>
 8003170:	2304      	movs	r3, #4
 8003172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003176:	e01a      	b.n	80031ae <UART_SetConfig+0x2e6>
 8003178:	2308      	movs	r3, #8
 800317a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800317e:	e016      	b.n	80031ae <UART_SetConfig+0x2e6>
 8003180:	2310      	movs	r3, #16
 8003182:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003186:	e012      	b.n	80031ae <UART_SetConfig+0x2e6>
 8003188:	efff69f3 	.word	0xefff69f3
 800318c:	40008000 	.word	0x40008000
 8003190:	40013800 	.word	0x40013800
 8003194:	40021000 	.word	0x40021000
 8003198:	40004400 	.word	0x40004400
 800319c:	40004800 	.word	0x40004800
 80031a0:	40004c00 	.word	0x40004c00
 80031a4:	40005000 	.word	0x40005000
 80031a8:	2310      	movs	r3, #16
 80031aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a9f      	ldr	r2, [pc, #636]	@ (8003430 <UART_SetConfig+0x568>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d17a      	bne.n	80032ae <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80031bc:	2b08      	cmp	r3, #8
 80031be:	d824      	bhi.n	800320a <UART_SetConfig+0x342>
 80031c0:	a201      	add	r2, pc, #4	@ (adr r2, 80031c8 <UART_SetConfig+0x300>)
 80031c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c6:	bf00      	nop
 80031c8:	080031ed 	.word	0x080031ed
 80031cc:	0800320b 	.word	0x0800320b
 80031d0:	080031f5 	.word	0x080031f5
 80031d4:	0800320b 	.word	0x0800320b
 80031d8:	080031fb 	.word	0x080031fb
 80031dc:	0800320b 	.word	0x0800320b
 80031e0:	0800320b 	.word	0x0800320b
 80031e4:	0800320b 	.word	0x0800320b
 80031e8:	08003203 	.word	0x08003203
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031ec:	f7ff f84c 	bl	8002288 <HAL_RCC_GetPCLK1Freq>
 80031f0:	61f8      	str	r0, [r7, #28]
        break;
 80031f2:	e010      	b.n	8003216 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031f4:	4b8f      	ldr	r3, [pc, #572]	@ (8003434 <UART_SetConfig+0x56c>)
 80031f6:	61fb      	str	r3, [r7, #28]
        break;
 80031f8:	e00d      	b.n	8003216 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031fa:	f7fe ffad 	bl	8002158 <HAL_RCC_GetSysClockFreq>
 80031fe:	61f8      	str	r0, [r7, #28]
        break;
 8003200:	e009      	b.n	8003216 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003202:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003206:	61fb      	str	r3, [r7, #28]
        break;
 8003208:	e005      	b.n	8003216 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800320a:	2300      	movs	r3, #0
 800320c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003214:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 80fb 	beq.w	8003414 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	4413      	add	r3, r2
 8003228:	69fa      	ldr	r2, [r7, #28]
 800322a:	429a      	cmp	r2, r3
 800322c:	d305      	bcc.n	800323a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003234:	69fa      	ldr	r2, [r7, #28]
 8003236:	429a      	cmp	r2, r3
 8003238:	d903      	bls.n	8003242 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003240:	e0e8      	b.n	8003414 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	2200      	movs	r2, #0
 8003246:	461c      	mov	r4, r3
 8003248:	4615      	mov	r5, r2
 800324a:	f04f 0200 	mov.w	r2, #0
 800324e:	f04f 0300 	mov.w	r3, #0
 8003252:	022b      	lsls	r3, r5, #8
 8003254:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003258:	0222      	lsls	r2, r4, #8
 800325a:	68f9      	ldr	r1, [r7, #12]
 800325c:	6849      	ldr	r1, [r1, #4]
 800325e:	0849      	lsrs	r1, r1, #1
 8003260:	2000      	movs	r0, #0
 8003262:	4688      	mov	r8, r1
 8003264:	4681      	mov	r9, r0
 8003266:	eb12 0a08 	adds.w	sl, r2, r8
 800326a:	eb43 0b09 	adc.w	fp, r3, r9
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	603b      	str	r3, [r7, #0]
 8003276:	607a      	str	r2, [r7, #4]
 8003278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800327c:	4650      	mov	r0, sl
 800327e:	4659      	mov	r1, fp
 8003280:	f7fc ffa2 	bl	80001c8 <__aeabi_uldivmod>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4613      	mov	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003292:	d308      	bcc.n	80032a6 <UART_SetConfig+0x3de>
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800329a:	d204      	bcs.n	80032a6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	60da      	str	r2, [r3, #12]
 80032a4:	e0b6      	b.n	8003414 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80032ac:	e0b2      	b.n	8003414 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032b6:	d15e      	bne.n	8003376 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80032b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d828      	bhi.n	8003312 <UART_SetConfig+0x44a>
 80032c0:	a201      	add	r2, pc, #4	@ (adr r2, 80032c8 <UART_SetConfig+0x400>)
 80032c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c6:	bf00      	nop
 80032c8:	080032ed 	.word	0x080032ed
 80032cc:	080032f5 	.word	0x080032f5
 80032d0:	080032fd 	.word	0x080032fd
 80032d4:	08003313 	.word	0x08003313
 80032d8:	08003303 	.word	0x08003303
 80032dc:	08003313 	.word	0x08003313
 80032e0:	08003313 	.word	0x08003313
 80032e4:	08003313 	.word	0x08003313
 80032e8:	0800330b 	.word	0x0800330b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032ec:	f7fe ffcc 	bl	8002288 <HAL_RCC_GetPCLK1Freq>
 80032f0:	61f8      	str	r0, [r7, #28]
        break;
 80032f2:	e014      	b.n	800331e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032f4:	f7fe ffde 	bl	80022b4 <HAL_RCC_GetPCLK2Freq>
 80032f8:	61f8      	str	r0, [r7, #28]
        break;
 80032fa:	e010      	b.n	800331e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032fc:	4b4d      	ldr	r3, [pc, #308]	@ (8003434 <UART_SetConfig+0x56c>)
 80032fe:	61fb      	str	r3, [r7, #28]
        break;
 8003300:	e00d      	b.n	800331e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003302:	f7fe ff29 	bl	8002158 <HAL_RCC_GetSysClockFreq>
 8003306:	61f8      	str	r0, [r7, #28]
        break;
 8003308:	e009      	b.n	800331e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800330a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800330e:	61fb      	str	r3, [r7, #28]
        break;
 8003310:	e005      	b.n	800331e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003312:	2300      	movs	r3, #0
 8003314:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800331c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d077      	beq.n	8003414 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	005a      	lsls	r2, r3, #1
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	085b      	lsrs	r3, r3, #1
 800332e:	441a      	add	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	fbb2 f3f3 	udiv	r3, r2, r3
 8003338:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	2b0f      	cmp	r3, #15
 800333e:	d916      	bls.n	800336e <UART_SetConfig+0x4a6>
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003346:	d212      	bcs.n	800336e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	b29b      	uxth	r3, r3
 800334c:	f023 030f 	bic.w	r3, r3, #15
 8003350:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	085b      	lsrs	r3, r3, #1
 8003356:	b29b      	uxth	r3, r3
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	b29a      	uxth	r2, r3
 800335e:	8afb      	ldrh	r3, [r7, #22]
 8003360:	4313      	orrs	r3, r2
 8003362:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	8afa      	ldrh	r2, [r7, #22]
 800336a:	60da      	str	r2, [r3, #12]
 800336c:	e052      	b.n	8003414 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003374:	e04e      	b.n	8003414 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003376:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800337a:	2b08      	cmp	r3, #8
 800337c:	d827      	bhi.n	80033ce <UART_SetConfig+0x506>
 800337e:	a201      	add	r2, pc, #4	@ (adr r2, 8003384 <UART_SetConfig+0x4bc>)
 8003380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003384:	080033a9 	.word	0x080033a9
 8003388:	080033b1 	.word	0x080033b1
 800338c:	080033b9 	.word	0x080033b9
 8003390:	080033cf 	.word	0x080033cf
 8003394:	080033bf 	.word	0x080033bf
 8003398:	080033cf 	.word	0x080033cf
 800339c:	080033cf 	.word	0x080033cf
 80033a0:	080033cf 	.word	0x080033cf
 80033a4:	080033c7 	.word	0x080033c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033a8:	f7fe ff6e 	bl	8002288 <HAL_RCC_GetPCLK1Freq>
 80033ac:	61f8      	str	r0, [r7, #28]
        break;
 80033ae:	e014      	b.n	80033da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033b0:	f7fe ff80 	bl	80022b4 <HAL_RCC_GetPCLK2Freq>
 80033b4:	61f8      	str	r0, [r7, #28]
        break;
 80033b6:	e010      	b.n	80033da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003434 <UART_SetConfig+0x56c>)
 80033ba:	61fb      	str	r3, [r7, #28]
        break;
 80033bc:	e00d      	b.n	80033da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033be:	f7fe fecb 	bl	8002158 <HAL_RCC_GetSysClockFreq>
 80033c2:	61f8      	str	r0, [r7, #28]
        break;
 80033c4:	e009      	b.n	80033da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033ca:	61fb      	str	r3, [r7, #28]
        break;
 80033cc:	e005      	b.n	80033da <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80033d8:	bf00      	nop
    }

    if (pclk != 0U)
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d019      	beq.n	8003414 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	085a      	lsrs	r2, r3, #1
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	441a      	add	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	2b0f      	cmp	r3, #15
 80033f8:	d909      	bls.n	800340e <UART_SetConfig+0x546>
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003400:	d205      	bcs.n	800340e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	b29a      	uxth	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	60da      	str	r2, [r3, #12]
 800340c:	e002      	b.n	8003414 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003420:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003424:	4618      	mov	r0, r3
 8003426:	3728      	adds	r7, #40	@ 0x28
 8003428:	46bd      	mov	sp, r7
 800342a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800342e:	bf00      	nop
 8003430:	40008000 	.word	0x40008000
 8003434:	00f42400 	.word	0x00f42400

08003438 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00a      	beq.n	8003462 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00a      	beq.n	8003484 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00a      	beq.n	80034a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034aa:	f003 0304 	and.w	r3, r3, #4
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00a      	beq.n	80034c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034cc:	f003 0310 	and.w	r3, r3, #16
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00a      	beq.n	80034ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ee:	f003 0320 	and.w	r3, r3, #32
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003514:	2b00      	cmp	r3, #0
 8003516:	d01a      	beq.n	800354e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003532:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003536:	d10a      	bne.n	800354e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	605a      	str	r2, [r3, #4]
  }
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b098      	sub	sp, #96	@ 0x60
 8003580:	af02      	add	r7, sp, #8
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800358c:	f7fd fdcc 	bl	8001128 <HAL_GetTick>
 8003590:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0308 	and.w	r3, r3, #8
 800359c:	2b08      	cmp	r3, #8
 800359e:	d12e      	bne.n	80035fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035a8:	2200      	movs	r2, #0
 80035aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f88c 	bl	80036cc <UART_WaitOnFlagUntilTimeout>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d021      	beq.n	80035fe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035c2:	e853 3f00 	ldrex	r3, [r3]
 80035c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80035c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	461a      	mov	r2, r3
 80035d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80035da:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035e0:	e841 2300 	strex	r3, r2, [r1]
 80035e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80035e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1e6      	bne.n	80035ba <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2220      	movs	r2, #32
 80035f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e062      	b.n	80036c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b04      	cmp	r3, #4
 800360a:	d149      	bne.n	80036a0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800360c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003614:	2200      	movs	r2, #0
 8003616:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f856 	bl	80036cc <UART_WaitOnFlagUntilTimeout>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d03c      	beq.n	80036a0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362e:	e853 3f00 	ldrex	r3, [r3]
 8003632:	623b      	str	r3, [r7, #32]
   return(result);
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800363a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	461a      	mov	r2, r3
 8003642:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003644:	633b      	str	r3, [r7, #48]	@ 0x30
 8003646:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003648:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800364a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800364c:	e841 2300 	strex	r3, r2, [r1]
 8003650:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e6      	bne.n	8003626 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3308      	adds	r3, #8
 800365e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	e853 3f00 	ldrex	r3, [r3]
 8003666:	60fb      	str	r3, [r7, #12]
   return(result);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f023 0301 	bic.w	r3, r3, #1
 800366e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	3308      	adds	r3, #8
 8003676:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003678:	61fa      	str	r2, [r7, #28]
 800367a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367c:	69b9      	ldr	r1, [r7, #24]
 800367e:	69fa      	ldr	r2, [r7, #28]
 8003680:	e841 2300 	strex	r3, r2, [r1]
 8003684:	617b      	str	r3, [r7, #20]
   return(result);
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1e5      	bne.n	8003658 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2220      	movs	r2, #32
 8003690:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e011      	b.n	80036c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2220      	movs	r2, #32
 80036a4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2220      	movs	r2, #32
 80036aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3758      	adds	r7, #88	@ 0x58
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	603b      	str	r3, [r7, #0]
 80036d8:	4613      	mov	r3, r2
 80036da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036dc:	e04f      	b.n	800377e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e4:	d04b      	beq.n	800377e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036e6:	f7fd fd1f 	bl	8001128 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d302      	bcc.n	80036fc <UART_WaitOnFlagUntilTimeout+0x30>
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e04e      	b.n	800379e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0304 	and.w	r3, r3, #4
 800370a:	2b00      	cmp	r3, #0
 800370c:	d037      	beq.n	800377e <UART_WaitOnFlagUntilTimeout+0xb2>
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2b80      	cmp	r3, #128	@ 0x80
 8003712:	d034      	beq.n	800377e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	2b40      	cmp	r3, #64	@ 0x40
 8003718:	d031      	beq.n	800377e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69db      	ldr	r3, [r3, #28]
 8003720:	f003 0308 	and.w	r3, r3, #8
 8003724:	2b08      	cmp	r3, #8
 8003726:	d110      	bne.n	800374a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2208      	movs	r2, #8
 800372e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f000 f838 	bl	80037a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2208      	movs	r2, #8
 800373a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e029      	b.n	800379e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003754:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003758:	d111      	bne.n	800377e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003762:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 f81e 	bl	80037a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2220      	movs	r2, #32
 800376e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e00f      	b.n	800379e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	69da      	ldr	r2, [r3, #28]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	4013      	ands	r3, r2
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	429a      	cmp	r2, r3
 800378c:	bf0c      	ite	eq
 800378e:	2301      	moveq	r3, #1
 8003790:	2300      	movne	r3, #0
 8003792:	b2db      	uxtb	r3, r3
 8003794:	461a      	mov	r2, r3
 8003796:	79fb      	ldrb	r3, [r7, #7]
 8003798:	429a      	cmp	r2, r3
 800379a:	d0a0      	beq.n	80036de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b095      	sub	sp, #84	@ 0x54
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037b6:	e853 3f00 	ldrex	r3, [r3]
 80037ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80037bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	461a      	mov	r2, r3
 80037ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80037ce:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80037d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80037d4:	e841 2300 	strex	r3, r2, [r1]
 80037d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1e6      	bne.n	80037ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	3308      	adds	r3, #8
 80037e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e8:	6a3b      	ldr	r3, [r7, #32]
 80037ea:	e853 3f00 	ldrex	r3, [r3]
 80037ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f023 0301 	bic.w	r3, r3, #1
 80037f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	3308      	adds	r3, #8
 80037fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003800:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003802:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003804:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003806:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003808:	e841 2300 	strex	r3, r2, [r1]
 800380c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800380e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1e5      	bne.n	80037e0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003818:	2b01      	cmp	r3, #1
 800381a:	d118      	bne.n	800384e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	e853 3f00 	ldrex	r3, [r3]
 8003828:	60bb      	str	r3, [r7, #8]
   return(result);
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	f023 0310 	bic.w	r3, r3, #16
 8003830:	647b      	str	r3, [r7, #68]	@ 0x44
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	461a      	mov	r2, r3
 8003838:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800383a:	61bb      	str	r3, [r7, #24]
 800383c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383e:	6979      	ldr	r1, [r7, #20]
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	e841 2300 	strex	r3, r2, [r1]
 8003846:	613b      	str	r3, [r7, #16]
   return(result);
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1e6      	bne.n	800381c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2220      	movs	r2, #32
 8003852:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003862:	bf00      	nop
 8003864:	3754      	adds	r7, #84	@ 0x54
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <memset>:
 800386e:	4402      	add	r2, r0
 8003870:	4603      	mov	r3, r0
 8003872:	4293      	cmp	r3, r2
 8003874:	d100      	bne.n	8003878 <memset+0xa>
 8003876:	4770      	bx	lr
 8003878:	f803 1b01 	strb.w	r1, [r3], #1
 800387c:	e7f9      	b.n	8003872 <memset+0x4>
	...

08003880 <__libc_init_array>:
 8003880:	b570      	push	{r4, r5, r6, lr}
 8003882:	4d0d      	ldr	r5, [pc, #52]	@ (80038b8 <__libc_init_array+0x38>)
 8003884:	4c0d      	ldr	r4, [pc, #52]	@ (80038bc <__libc_init_array+0x3c>)
 8003886:	1b64      	subs	r4, r4, r5
 8003888:	10a4      	asrs	r4, r4, #2
 800388a:	2600      	movs	r6, #0
 800388c:	42a6      	cmp	r6, r4
 800388e:	d109      	bne.n	80038a4 <__libc_init_array+0x24>
 8003890:	4d0b      	ldr	r5, [pc, #44]	@ (80038c0 <__libc_init_array+0x40>)
 8003892:	4c0c      	ldr	r4, [pc, #48]	@ (80038c4 <__libc_init_array+0x44>)
 8003894:	f000 f818 	bl	80038c8 <_init>
 8003898:	1b64      	subs	r4, r4, r5
 800389a:	10a4      	asrs	r4, r4, #2
 800389c:	2600      	movs	r6, #0
 800389e:	42a6      	cmp	r6, r4
 80038a0:	d105      	bne.n	80038ae <__libc_init_array+0x2e>
 80038a2:	bd70      	pop	{r4, r5, r6, pc}
 80038a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80038a8:	4798      	blx	r3
 80038aa:	3601      	adds	r6, #1
 80038ac:	e7ee      	b.n	800388c <__libc_init_array+0xc>
 80038ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80038b2:	4798      	blx	r3
 80038b4:	3601      	adds	r6, #1
 80038b6:	e7f2      	b.n	800389e <__libc_init_array+0x1e>
 80038b8:	080039c4 	.word	0x080039c4
 80038bc:	080039c4 	.word	0x080039c4
 80038c0:	080039c4 	.word	0x080039c4
 80038c4:	080039c8 	.word	0x080039c8

080038c8 <_init>:
 80038c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ca:	bf00      	nop
 80038cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ce:	bc08      	pop	{r3}
 80038d0:	469e      	mov	lr, r3
 80038d2:	4770      	bx	lr

080038d4 <_fini>:
 80038d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d6:	bf00      	nop
 80038d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038da:	bc08      	pop	{r3}
 80038dc:	469e      	mov	lr, r3
 80038de:	4770      	bx	lr
